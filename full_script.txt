//
//
// CONFIGURATION
//
//
var trace = true; // trace entry and exit for debugging
var generate_item_list = true; //generate the item, weapon, and armor lists for the inventory tab on startup
var skill_list_on = true; //regenerate skill list ability on change to skill tab and skill name change
var weapon_list_on = true; //regenerate weapon list ability on change to weapontab and weapon name change
var realtime = true; //character sheet log shows real time 
var gametime = true; //character sheet log shows game time 
//
// House rules
//

var missle_close_range_mod = 0; // house rule close range mod (0 is canon) adds an extra range column for close vs short range
var randomize_init_roll = false; // adds 3d6 to the init for randomness
/**
 * Command dispatcher
 */
// commandname -> object with
//                  "action" a function taking two args, args and msg, which implements the command.
//                  "re_syntax" regular expression the command has to match
//                  "hr_syntax" a more human understandable version of the command syntax

// Regular expression tester: https://regex101.com/
// Regular expression cheatsheet:
// Character id: [-_a-zA-Z0-9]{20}
// Number: [-+]?[0-9]+
// one of the following: (high|mid|low|arms|legs|torso|head|neck|skull|abdomen|face|thorax|shoulder|hip|thigh|knee|calf|foot|upper_arm|elbow|forearm|hand|groin)

var dispatch_table = {
    "!calcsb": {
        "action": (args, msg) => { handle_calcsb(args, msg); },
        "re_syntax": /^!calcsb [-_a-zA-Z0-9]{20}$/,
        "hr_syntax": "!calcsb character_id<br/>Calculate the skill bonus for the selected character."
    },
    "!cheat": {
        "action": (args, msg) => { handle_cheat(args, msg); },
        "re_syntax": /^!cheat [-+]?[0-9]+$/,
        "hr_syntax": "!cheat number<br/>The next d100 roll will be the provided number."
    },
    "!mapsend": {
        "action": (args, msg) => { handle_mapsend(args, msg); },
        "re_syntax": /^!mapsend [^,]+,[^,]+$/,
        "hr_syntax": "!mapsend player_name,page_name <br/>Not sure what this does."
    },
    "!itemlist": {
        "action": (args, msg) => { handle_itemlist(args, msg); },
        "re_syntax": /^!itemlist$/,
        "hr_syntax": "!itemlist<br/>Prepares the item lists for use by other macros."
    },
    "!occupation": {
        "action": (args, msg) => { handle_occupation(args, msg); },
        "re_syntax": /^!occupation [-_a-zA-Z0-9]{20}$/,
        "hr_syntax": "!occupation character_id<br/>Adds the occupation skills to the character."
    },
    "!table": {
        "action": (args, msg) => { handle_table(args, msg); },
        "re_syntax": /^!table .+$/,
        "hr_syntax": "!table [[inline roll]] [[inline roll]] character id<br/>Rolls a value on a specially formatted handout."
    },
    "!rollatts": {
        "action": (args, msg) => { handle_rollatts(args, msg); },
        "re_syntax": /^!rollatts [-_a-zA-Z0-9]{20}$/,
        "hr_syntax": "!rollatts character_id<br/>Rolls a new character for you"
    },
    "!newturn": {
        "action": (args, msg) => { handle_newturn(args, msg); },
        "re_syntax": /^!newturn$/,
        "hr_syntax": "!newturn<br/>Starts a new round and re-computes initiative"
    },
    "!tokendis": {
        "action": (args, msg) => { handle_tokendis(args, msg); },
        "re_syntax": /^!tokendis [-_a-zA-Z0-9]{20} [-_a-zA-Z0-9]{20}$/,
        "hr_syntax": "!tokendis character_id1 character_id2<br/>Computes the distance between two characters"
    },
    "!sheetattack": {
        "action": (args, msg) => { handle_sheetattack(args, msg); },
        "re_syntax": /^(!sheetattack|!attack) [-_a-zA-Z0-9]{20} (high|mid|low|arms|legs|torso|head|neck|skull|abdomen|face|thorax|shoulder|hip|thigh|knee|calf|foot|upper_arm|elbow|forearm|hand|groin) (H|B|E|P|F) (melee|missile) [-+]?[0-9]+ [-_a-zA-Z0-9]{20} .+$/,
        "hr_syntax": "![sheet]attack attacker_id (high|mid|low|arms|legs|torso|head|neck|skull|abdomen|face|thorax|shoulder|hip|thigh|knee|calf|foot|upper_arm|elbow|forearm|hand|groin) (H|B|E|P) (missile|melee) modifier defender_id weapon"
    },
    "!attack": {
        "action": (args, msg) => { handle_attack(args, msg); },
        "re_syntax": /^(!sheetattack|!attack) [-_a-zA-Z0-9]{20} (high|mid|low|arms|legs|torso|head|neck|skull|abdomen|face|thorax|shoulder|hip|thigh|knee|calf|foot|upper_arm|elbow|forearm|hand|groin) (H|B|E|P|F) (melee|missile) [-+]?[0-9]+ [-_a-zA-Z0-9]{20} .+$/,
        "hr_syntax": "![sheet]attack attacker_id (high|mid|low|arms|legs|torso|head|neck|skull|abdomen|face|thorax|shoulder|hip|thigh|knee|calf|foot|upper_arm|elbow|forearm|hand|groin) (H|B|E|P) (missile|melee) modifier defender_id weapon"
    },
    "!defend": {
        "action": (args, msg) => { handle_defend(args, msg); },
        "re_syntax": /^!defend (ignore|dodge|block|counterstrike) [-+]?[0-9]+ WeaponName:.*$/,
        "hr_syntax": "!defend (block mod WeaponName: weapon_name|dodge mod|ignore|counterstrike mod WeaponName: weapon_name)<br/>defends against an attack"
    },
    "!invin": {
        "action": (args, msg) => { handle_invin(args, msg); },
        "re_syntax": /^!invin [-_a-zA-Z0-9]{20}$/,
        "hr_syntax": "!invin character_id<br/>Outputs character in HârnMaster Character Utility text format in character note."

    },
    "!move": {
        "action": (args, msg) => { handle_move(args, msg); },
        "re_syntax": /^!move.*$/,
        "hr_syntax": "Does something"
    },
    "!xin": {
        "action": (args, msg) => { handle_xin(args, msg); },
        "re_syntax": /^!xin( [-_a-zA-Z0-9]{20})?$/,
        "hr_syntax": "!xin [character_id]<br/>Imports a character in HârnMaster Character Utility text format from the character note."

    },
    "!ca": {
        "action": (args, msg) => { handle_ca(args, msg); },
        "re_syntax": /^!ca( [-_a-zA-Z0-9]{20})?$/,
        "hr_syntax": "!ca [character_id]<br/>Calculates armor values at hit locations."
    },
    "!addItem": {
        "action": (args, msg) => { handle_addItem(args, msg); },
        "re_syntax": /^!addItem [-_a-zA-Z0-9]{20} .*$/,
        "hr_syntax": "!addItem character_id Item name"
    },
    "!clearmove": {
        "action": (args, msg) => { handle_clearmove(args, msg); },
        "re_syntax": /^!clearmove.*$/,
        "hr_syntax": "Does something"
    },
    "!tokemove": {
        "action": (args, msg) => { handle_tokemove(args, msg); },
        "re_syntax": /^!tokemove.*$/,
        "hr_syntax": "Does something"
    },
    "!out": {
        "action": (args, msg) => { handle_out(args, msg); },
        "re_syntax": /^!out.*$/,
        "hr_syntax": "Does something"
    },
    "!attack_melee_table": {
        "action": (args, msg) => { handle_attack_melee_table(args, msg); },
        "re_syntax": /^!attack_melee_table (block|counterstrike|dodge|ignore) [1-4] [1-4]$/,
        "hr_syntax": "!attack_meleee_table (block|counterstrike|dodge|ignore) [1-4] [1-4]<br/>Outputs the attack melee table "
    },
    "!loc": {
        "action": (args, msg) => { handle_loc(args, msg); },
        "re_syntax": /^!loc [0-9]+ [0-9]+$/,
        "hr_syntax": "!loc result aim_index<br/>Gets the hit location for a die roll and aim"
    },
    "!time": {
        "action": (args, msg) => { handle_time(args, msg); },
        "re_syntax": /^!time$/,
        "hr_syntax": "!time<br/>Outputs the current time"
    },
    "!settime": {
        "action": (args, msg) => { handle_settime(args, msg); },
        "re_syntax": /^!settime [0-9]{3,}( [0-9]{1,2}( [0-9]{1,2}( [0-9]{1,2}( [0-9]{1,2}( [0-9]{1,2})?)?)?)?)?$/,
        "hr_syntax": "!settime YYY [MM [DD [HH [MM [SS]]]]]"
    },
    "!addtime": {
        "action": (args, msg) => { handle_addtime(args, msg); },
        "re_syntax": /^!addtime [+-]?[0-9]+$/,
        "hr_syntax": "!addtime seconds<br/>Adds seconds to the time"
    },
    "!rand": {
        "action": (args, msg) => { handle_rand(args, msg); },
        "re_syntax": /^!rand.*$/,
        "hr_syntax": "!rand selected characters<br/>Randomly choses one of all selected tokens."
    },
    "!gmrand": {
        "action": (args, msg) => { handle_gmrand(args, msg); },
        "re_syntax": /^!gmrand.*$/,
        "hr_syntax": "!gmrand selected characters<br/>Randomly choses one of all selected tokens."

    },
    "!improveskill": {
        "action": (args, msg) => { handle_improveskill(args, msg); },
        "re_syntax": /^!improveskill [-_a-zA-Z0-9]{20} .*$/,
        "hr_syntax": "!improveskill character_id skill name<br/>Performs a skill improvement roll for the given character and skill."
    },
    "!pickskill": {
	    "action": (args, msg) => { handle_pickskill(args, msg); },
        "re_syntax": /^!pickskill [-_a-zA-Z0-9]{20}.*$/,
        "hr_syntax": "!pickskill character_id prompt title<br/>Prompts the user to pick a valid skill to improve"

    }
}





on("ready", function() {
    if( ! state.MainGameNS ) {
        state.MainGameNS = { index: 0, dis: 0 };
    }
    log(getHarnTimeStr(state.MainGameNS.GameTime));
	log("loaded. trace: "+ trace);
	initializeTables(0);
	started = true;
});






on("chat:message", function(msg) {
if (trace) {log(`>chat:message(${msg.content})`);}
 if(msg.type == "api") {
	var args = msg.content.split(" ");
	if (dispatch_table.hasOwnProperty(args[0])) {
		var commandMap = dispatch_table[args[0]];
		try {
			// First, test the syntax regular expression if it has one
			if (commandMap.hasOwnProperty("re_syntax")) {
				log(`comparing syntax to ${commandMap.re_syntax}`)
				if (!commandMap.re_syntax.test(msg.content)) {
					var errorMessage = `&{template:default} {{name=Syntax error}} {{Received=${msg.content}}}`;
					if (commandMap.hasOwnProperty("hr_syntax")) {
						errorMessage += `{{Expected=${commandMap.hr_syntax}}}`;
					}
					sendChat("API", errorMessage);
					return;
				}
			}
			// syntax check passed or doesn't exist. Execute the action if it exists.
			if (commandMap.hasOwnProperty("action")) {
				commandMap.action(args, msg)
			} else {
				sendChat("API Error", `No action defined for ${args[0]}`)
			}
		} catch (err) {
			// Something went wrong. Log it, alert in chat and prevent the sandbox from bailing.
			log(err.stack);
			sendChat("API Error", err.message);
		}
	} else {
		log(`No such command ${msg.content}`);
		sendChat("API Error", `&{template:default} {{name=Unknown command}} {{Received=${msg.content}}}`)

	}

 } else {
	chatParser(msg);
 }


 if (trace) {log("<chat:message")}
});







on("change:attribute:current", function(obj, prev) {

    if((obj.get('name') == "INITIATIVE_ML") || (obj.get('name') == "UNIVERSAL_PENALTY") || (obj.get('name') == "ENCUMBRANCE") || (obj.get('name') == "RIDER")){

        charid = obj.get("_characterid");

    	var rideratt = findObjs({
    		name: 'RIDER',
    		_type: "attribute",
    		_characterid: charid,
    	})[0];
        if (rideratt) {
        	var rider = findObjs({
        		name: rideratt.get('current'),
        		_type: "character",
        	})[0];
        	if (rider) {
            	mySet('STEED_INIT',rider.id,(parseInt(myGet('INITIATIVE_ML', charid, 0)) - (parseInt(myGet('UNIVERSAL_PENALTY', charid, 0)) * 5)- (parseInt(myGet('ENCUMBRANCE', charid, 0)) * 5)));

        	}
        }
    } else if (obj.get('name').includes("WEAPON_NAME") && weapon_list_on) {
        setWeaponsList(obj.get("_characterid"));
    } else if (obj.get('name').includes("SKILL_NAME") && skill_list_on) {
        setSkillList(obj.get("_characterid"));
    } else if (obj.get('name') == "tab") {
		if (obj.get('current') == 2 && skill_list_on) {
	        setSkillList(obj.get("_characterid"));
		} else if (obj.get('current') == 3 && weapon_list_on) {
	        setWeaponsList(obj.get("_characterid"));
		}
    }
});

on("change:campaign:turnorder", function(obj, prev) {

    if(Campaign().get("turnorder") !== "") {
        if(prev["turnorder"] !== "") {
            var turnorder = JSON.parse(Campaign().get("turnorder"));
            var oldturnorder = JSON.parse(prev["turnorder"]);
            if (turnorder.length > 0) {
                if (turnorder[0]["id"] !== oldturnorder[0]["id"]) {
                    toke = getObj("graphic",turnorder[0]["id"]);
                    sendGMPing(toke.get('left'), toke.get('top'), toke.get('pageid'), "", true);
                }
            }
        }
    }

});


/**
 * Process an attack message
 */
function handle_attack(atk, msg) {
	if (trace) {log(`handle_attack(${atk},${msg.content})`)}

    if(atk[0] == "!sheetattack")  {
        var tokelist = findObjs({
		  represents: atk[1],
		  _pageid: getSelectedPage(msg),
          _type: "graphic",
        });
        if (tokelist == null || tokelist.length < 1) {
            sendChat(msg.who, "Move the player banner to this page.");
            return;
        }
        atk[1] = tokelist[0].id;

    }
	var atoke = getObj("graphic", atk[1]);
	var charid = atoke.get("represents")
	var toke = getObj("graphic", atk[6]);
	if (!toke.get("represents")) {sendChat(msg.who, "No defender"); return;}
	var defcharid = toke.get("represents");
	var defchar = getObj("character", defcharid);
	var dist = 0;
	var res = "";
	var atkmov = 0;
	var defmov = 0;

	if (atoke && toke) {
	    atkmov = tokemove(atoke);
	    defmov = tokemove(toke);
		dist = tokendistance(atoke, toke);
		res = res + "Distance: " + dist[0] + "<br/>Attacker Move: " + atkmov + "<br/>Defender Move: " + defmov ;
	}
	// Use regular expression to get the string which starts after the 7th space delimited word
	weapNameArray = msg.content.match(/^([^ ]+ ){7}(.*)$/);
	wepname=weapNameArray[weapNameArray.length-1];
	log(`selected weapon: ${wepname}`);
	// wepname = msg.content
	// 		.slice((msg.content.indexOf(atk[6]) + atk[6].length + 1))

	if (wepname == "") {
		log(msg.content);
		return;
	}

	var atkstr = "";
	var appstr = "";


	if (atoke.get('bar3_value')) {
		var app = (parseInt(atoke.get('bar3_value')) + parseInt(myGet(
				'ENCUMBRANCE', charid, 0))) * 5;
		appstr = appstr + " -" + (parseInt(atoke.get('bar3_value'))*5) + "[UP] -" + (parseInt(myGet('ENCUMBRANCE', charid, 0))*5) + "[EP]";
	} else {
		var app = (parseInt(myGet('UNIVERSAL_PENALTY', charid, 0)) + parseInt(myGet(
				'ENCUMBRANCE', charid, 0))) * 5;
		appstr = appstr + " -" + (parseInt(myGet('UNIVERSAL_PENALTY', charid, 0))*5) + "[UP] -" + (parseInt(myGet('ENCUMBRANCE', charid, 0))*5) + "[EP]";
	}



	app += hit_loc_penalty[atk[2]]["penalty"]
	appstr += " -"+hit_loc_penalty[atk[2]]['penalty']+"[Loc]";


	if (atk[4] == "missile") {
		var missi;
		({ missi, app, appstr } = missileAttack(dist, app, appstr, atkmov, charid));
	}

	var wep = findWeapon(charid, wepname);

	if (!wep[0]) {
	    sendChat(msg.who, "Weapon " + wepname + " not found");
	    return;
	}


	var ojn = wep[0].get('name');


	var atkml = computeAttackML(ojn, charid, app, atk[5]);
	if (!atkml) {
		sendChat("API","attack ml problem");
		return;
	}
	var aeml = getMeleeEML(atoke, ojn, charid, atk[5], atk[2]);
	_.each(_.keys(aeml), function(k) {
		log(k+"=="+aeml[k]);
	});
	
	
    if (atkml >95) {atkml=95;}
	aroll = randomInteger(100);
	var ctype = parseInt(myGet('CType', charid, 0))

	log("Roll: " + aroll);
	log("AtkML:" + atkml);

	if (ctype !== 0) {
	    for (i=0;i<(ctype*-1);i++) {
	        var broll = randomInteger(300);
	        log("cheat: " + aroll + " " +broll);
	        if (broll < aroll) {
	            aroll=broll;
	        }
	    }
	    if (ctype > 0) {
	    	aroll = 101 - aroll;
	    }
	    log("Cheat Roll: " + aroll);

	}

	if (state.MainGameNS["cheat"] > 0) {
	    if (state.MainGameNS["cheat"] >100) {
	        aroll = 100 - state.MainGameNS["cheat"]
	    } else {
	        aroll = state.MainGameNS["cheat"]
	        state.MainGameNS["cheat"] = 0;
	    }

	}

	var { asuc, ais } = determineSuccess(atkml);
	state.MainGameNS["aroll"] = aroll
	state.MainGameNS["asuc"] = asuc
	state.MainGameNS["ais"] = ais
	state.MainGameNS["wepname"] = wepname
	state.MainGameNS["attacker"] = atk
	state.MainGameNS["missi"] = missi



	var wep = getWep(defcharid);

	atkstr = "&{template:harn-fancy} {{header=" + atoke.get('name')+" "+atk[4]+" attacks "+ toke.get('name')
			+ " with a "
			+ wepname
			+ "}} {{info="
			+ res
			+ "}} {{def=[Dodge](!defend dodge ?{Mod|0} WeaponName:Dodge)[Ignore](!defend ignore ?{Mod|0} WeaponName:)";
	for (var i=0;i<wep.length;i++) {
	    atkstr += "["
			+ myGet(wep[i].get('name'),defcharid,"")
			+ "](!defend ?{response|block|counterstrike} ?{Mod|0} WeaponName:"
			+ myGet(wep[i].get('name'),defcharid,"").replace(')','&#41;') +")";
	}
	atkstr = atkstr + "}}"


	state.MainGameNS["appstr"] = myGet(ojn.slice(0, -4) + "ML", charid, 0) +  "[ML] +" + myGet(ojn.slice(0, -4) + "ATK", charid, 0) + "[Atk] +" + myGet(ojn.slice(0, -4) 	+ "HM", charid, 0) + "[HM]" + appstr + " +" + atk[5] + "[Sit]";

	state.MainGameNS["atkstrout"] =   "<br/>Penalty: "
			+ app
			+ "<br/>Other Mods: "
			+ atk[5]
			+ "<br/>Mastery Level: "
			+ myGet(ojn.slice(0, -4) + "ML", charid, 0)
			+ "<br/>Attack Mod: "
			+ myGet(ojn.slice(0, -4) + "ATK", charid, 0)




	sendChat(msg.who, atkstr);

}





function handle_defend(def, msg) {

	var atk = state.MainGameNS.attacker;
	var wepname = state.MainGameNS.wepname;
	var atoke = getObj("graphic", atk[1]);

	var toke = getObj("graphic", atk[6]);
	if (!toke.get("represents")) {sendChat(msg.who, "No defender"); return;}
	if (!toke.get("represents").startsWith("-M")) {sendChat(msg.who, "No defender -M"); return;}
	var charid = atoke.get("represents")
	var defcharid = toke.get("represents")
	var defchar = getObj("character", defcharid);
	var aspect = 0;
	var allowed = defchar.get("controlledby");
    if(!playerIsGM(msg.playerid)) {
        if (allowed.indexOf(msg.playerid) == -1 &&  allowed.indexOf("all") == -1){
            senChat("API", msg.who + " is not in control")
            return;
        }
    }


	var wep = filterObjs(function(obj) {
		obn = obj.get('name');
		if (obn) {
			if ((obn.indexOf("WEAPON_NAME")) !== -1
					&& (obj.get("_characterid") == charid)
					&& (obj.get("current") == wepname)) {
				return true;
			} else {
				return false;
			}
		} else {
			return false;
		}
	});
	if (!wep) {
		senChat("API", msg.who + " No weapon")
		return;
	}

	var aojn = wep[0].get('name');

	if (atk[3] == "H") {

		var baspect = myGet(aojn.slice(0, -4) + "B", charid, 0)
		var easpect = myGet(aojn.slice(0, -4) + "E", charid, 0)
		var paspect = myGet(aojn.slice(0, -4) + "P", charid, 0)

		if (baspect !== "-") {
			aspect = parseInt(baspect);
			var aspstr = "B";
		}
		if (easpect !== "-") {
			if (parseInt(easpect) >= aspect) {
				aspect = parseInt(easpect);
				var aspstr = "E";
			}
		}
		if (paspect !== "-") {
			if (parseInt(paspect) >= aspect) {
				aspect = parseInt(paspect);
				var aspstr = "P";
			}
		}
	} else {
		var aspect = parseInt(myGet(aojn.slice(0, -4) + atk[3], charid, 0));
		var aspstr = atk[3];
	}
	if (atk[4] == "missile") {
	    if (wepname in missile_range) {
	        aspect = state.MainGameNS.missi[1];
	    } else {
	        aspect = Math.round(aspect * parseFloat(state.MainGameNS.missi[1]))
	    }
	}

	if (toke.get('bar3_value')) {

		var pp = (parseInt(toke.get('bar3_value')) + parseInt(myGet(
				'ENCUMBRANCE', defcharid, 0))) * 5;

	} else {
		var pp = (parseInt(myGet('UNIVERSAL_PENALTY', defcharid, 0)) + parseInt(myGet(
				'ENCUMBRANCE', defcharid, 0))) * 5;
	}

	if (def[1] == "dodge") {
	    var defml = 0;
	    if ((atk[4] == "missile") && (wepname.indexOf("Bow") !== -1)) {
		    defml = Math.round(parseInt(myGet("DODGE_ML", defcharid, 0))/2) + parseInt(def[2])- (pp);
	    } else {
	        defml = parseInt(myGet("DODGE_ML", defcharid, 0)) + parseInt(def[2])- (pp);
	    };

		var defstr = "";// "+" +  parseInt(myGet("DODGE_ML", defcharid, 0)) + "+" + parseInt(def[2])+ "-" + (pp);
		var defwepname = "Dodge";

	}

	if ((def[1] == "block") || (def[1] == "counterstrike")) {
		var defwepname = msg.content.slice((msg.content.indexOf("WeaponName:") + 11));

		if (defwepname.length > 3) {

			var defwep = filterObjs(function(obj) {
				obn = obj.get('name');
				if (obn) {
					if ((obn.indexOf("WEAPON_NAME")) !== -1
							&& (obj.get("_characterid") == defcharid)
							&& (obj.get("current") == defwepname)) {
						return true;
					} else {
						return false;
					}
				} else {
					return false;
				}
			});

			var ojn = defwep[0].get('name');

			if (def[1] == "counterstrike") {
			    var defml = parseInt(myGet(ojn.slice(0, -4) + "ML", defcharid, 0)) - pp + parseInt(myGet(ojn.slice(0, -4) + "ATK", defcharid, 0)) + parseInt(myGet(ojn.slice(0, -4) + "HM", defcharid, 0)) + parseInt(def[2]);

			} else {
			    var defml = parseInt(myGet(ojn.slice(0, -4) + "ML", defcharid, 0)) - pp + parseInt(myGet(ojn.slice(0, -4) + "DEF", defcharid, 0)) + parseInt(myGet(ojn.slice(0, -4) + "HM", defcharid, 0)) + parseInt(def[2]);

			}

		} else {
			def[1] = "ignore";
			var defstr = ""
		}

	}

	droll = randomInteger(100);

	var ctype = parseInt(myGet('DCType', defcharid, 0))

	log("Def roll: " + droll);
	if (ctype !== 0) {
	    for (i=0;i<(ctype*-1);i++) {
	        var broll = randomInteger(300);
	        log("cheat: " + aroll + " " +broll);
	        if (broll < droll) {
	            droll=broll
	        }
	    }
	    if (ctype > 0) {
	        droll = 101 - droll;
	    }
	    log("Cheat Def roll: " + droll);

	}

	
	log("defml: "+defml)
	

	if (state.MainGameNS["cheat"] > 0) {
	    if (state.MainGameNS["cheat"] >100) {
	        droll = 100 - state.MainGameNS["cheat"]
	    } else {
	        droll = state.MainGameNS["cheat"]
	        state.MainGameNS["cheat"] = 0;
	    }

	}

	if (defml >95) {defml=95;}

	if ((droll <= defml) && (droll % 5 == 0)) {
		var dsuc = "CS";
		var dis = 3;
	}
	if ((droll <= defml) && (droll % 5 !== 0)) {
		var dsuc = "MS";
		var dis = 2;
	}
	if ((droll > defml) && (droll % 5 !== 0)) {
		var dsuc = "MF";
		var dis = 1;
	}
	if ((droll > defml) && (droll % 5 == 0)) {
		var dsuc = "CF";
		var dis = 0;
	}

	if (def[1] == "ignore") {
		dis = 0;
	}

	if (atk[4] == "missile") {

		var r = attack_missile[def[1]][state.MainGameNS.ais][dis];

	} else {
		var r = attack_melee[def[1]][state.MainGameNS.ais][dis];
	}


	var res =  r + "<br/><br/>";
	var ares = "";
	var dres = "";

	if ((r.indexOf("A*") == 0) || (r.indexOf("B*") == 0)
			|| (r.indexOf("M*") == 0)) {


		var impactroll = "";
		var tot = 0;

		var sides = 6;
		var bm = 0;

		var imd = "";//myGet(ojn.slice(0, -4) + "NOTE", charid, "")
		var attribute = findObjs({
    		type: 'attribute',
    		characterid: charid,
    		name: aojn.slice(0, -4) + "NOTE"
	    })[0]

	    if (attribute) {
	        imd = attribute.get('current');

	    }
	    log("imd: " + imd);

		if (imd.length>0) {
    		var impactmod = imd.split(":")

    		if (impactmod.length==2) {
    		    aspect = aspect + parseInt(impactmod[1]);
    		    log("Impact mod: "+impactmod[1]);
    		}
    		if (impactmod.length==3) {
    		    log("Impact mod: "+impactmod[1] + " : " + impactmod[2]);
    		    if(impactmod[1] == "d") {

    		        for (i = 0; i < parseInt(impactmod[2]); i++) {
            			var ir = randomInteger(6);
            			tot = tot + ir;
            			if (impactroll.length > 2) {
            				impactroll = impactroll + " + " + ir;

            			} else {
            				impactroll = impactroll + "[[" + ir;

            			}
    		        }
    		    } else {
    		    sides =  parseInt(impactmod[1]);
    		    bm =  parseInt(impactmod[2]);
    		    }
    		}
		}

		for (i = 0; i < parseInt(r.slice(2)); i++) {
			var ir = randomInteger(sides) + bm;
			tot = tot + ir
			if (impactroll.length > 2) {
				impactroll = impactroll + " + " + ir;

			} else {
				impactroll = impactroll + "[[" + ir;

			}
		}


		tot = tot + aspect;
		impactroll = impactroll + " + " + aspect + " ]]";


		var hitloc = gethitloc(randomInteger(100), hit_loc_penalty[atk[2]]["index"]);

		var avatloc = myGet(hitloc + "_" + aspstr, defcharid,0);

		ares= ares+ "<br/>Attacker "+atoke.get('name')+" Impact: " + impactroll + "<br/>Location: "
				+ hitloc + "<br/>AV at Loc: " + avatloc
				+ "<br/>Effective Impact: " + (tot - avatloc);
		if (tot - avatloc > 0) {
			var eff = gethiteff(hitloc, tot - avatloc);
			ares= ares+ "<br/>Defender Injury: " + eff + " " + aspstr
			var unipenalty =  parseInt(eff.match(/\d/));
			if (toke.get('bar3_link')) {

				var unipenalty = unipenalty + parseInt(myGet('UNIVERSAL_PENALTY', defcharid, 0));
				toke.set('bar3_value', unipenalty);
				addinjury(aspstr+" "+hitloc, eff, defcharid)
			} else if (toke.get('bar3_value')){
				var unipenalty = unipenalty + parseInt(toke.get('bar3_value'));
				toke.set('bar3_value', unipenalty);
			} else {
				var unipenalty = unipenalty + parseInt(myGet('UNIVERSAL_PENALTY', defcharid, 0));
				toke.set('bar3_value', unipenalty);
			}

			ares= ares+ rollshock(defcharid, toke, unipenalty)

		}

	}

	if ((r.indexOf("D*") == 0) || (r.indexOf("B*") == 0)) {

		var baspect = myGet(ojn.slice(0, -4) + "B", defcharid, 0)
		var easpect = myGet(ojn.slice(0, -4) + "E", defcharid, 0)
		var paspect = myGet(ojn.slice(0, -4) + "P", defcharid, 0)
		var defaspstr = "";
		if (baspect !== "-") {
			aspect = parseInt(baspect);
			var defaspstr = "B";
		}
		if (easpect !== "-") {
			if (parseInt(easpect) >= aspect) {
				aspect = parseInt(easpect);
				var defaspstr = "E";
			}
		}
		if (paspect !== "-") {
			if (parseInt(paspect) >= aspect) {
				aspect = parseInt(paspect);
				var defaspstr = "P";
			}
		}


		var impactroll = "";
		var tot = 0;

		var sides = 6;
		var bm = 0;
		var imd = "";//myGet(ojn.slice(0, -4) + "NOTE", charid, "")
		var attribute = findObjs({
    		type: 'attribute',
    		characterid: defcharid,
    		name: aojn.slice(0, -4) + "NOTE"
	    })[0]

	    if (attribute) {
	        imd = attribute.get('current');

	    }
		if (imd.length>0) {
    		var impactmod = imd.split(":")
    		if (impactmod.length==2) {
    		    aspect = aspect + parseInt(impactmod[1]);
    		    log("Impact mod: "+impactmod[1]);
    		}
    		if (impactmod.length==3) {
    		    log("Impact mod: "+impactmod[1] + " : " + impactmod[2]);
    		    if(impactmod[1] == "d") {

    		        for (i = 0; i < parseInt(impactmod[2]); i++) {
            			var ir = randomInteger(6);
            			tot = tot + ir;
            			if (impactroll.length > 2) {
            				impactroll = impactroll + " + " + ir;

            			} else {
            				impactroll = impactroll + "[[" + ir;

            			}
    		        }
    		    } else {
    		    sides =  parseInt(impactmod[1]);
    		    bm =  parseInt(impactmod[2]);
    		    }
    		}
		}

		for (i = 0; i < parseInt(r.slice(2)); i++) {
			var ir = randomInteger(sides) + bm;
			tot = tot + ir
			if (impactroll.length > 2) {
				impactroll = impactroll + " + " + ir;

			} else {
				impactroll = impactroll + "[[" + ir;

			}
		}

		tot = tot + aspect;
		impactroll = impactroll + " + " + aspect + " ]]";

		var hitloc = gethitloc(randomInteger(100), 1);

		var avatloc = myGet(hitloc + "_" + defaspstr, charid,0);

		dres= dres+ "<br/>Counterstriker "+toke.get('name')+" Impact: " + impactroll + "<br/>Location: "
				+ hitloc + "<br/>AV at Loc: " + avatloc
				+ "<br/>Effective Impact: " + (tot - avatloc);
		if (tot - avatloc > 0) {
			var eff = gethiteff(hitloc, tot - avatloc);
			dres= dres+ "<br/>Attacker Injury: " + eff + " " + defaspstr
			var unipenalty =  parseInt(eff.match(/\d/));
			if (atoke.get('bar3_link')) {

				var unipenalty = unipenalty + parseInt(myGet('UNIVERSAL_PENALTY', charid, 0));
				atoke.set('bar3_value', unipenalty);
				addinjury(defaspstr+" "+hitloc, eff, charid)
			} else if (atoke.get('bar3_value')){
				var unipenalty = unipenalty + parseInt(atoke.get('bar3_value'));
				atoke.set('bar3_value', unipenalty);
			} else {
				var unipenalty = unipenalty + parseInt(myGet('UNIVERSAL_PENALTY', charid, 0));
				atoke.set('bar3_value', unipenalty);
			}
			dres= dres+ rollshock(charid, atoke, unipenalty)
		}
	}

	if (def[1] == "dodge") {

	    if ((atk[4] == "missile") && (wepname.indexOf("Bow") !== -1)) {
            var drolltarg = parseInt(parseInt(myGet("DODGE_ML", defcharid, 0))/2) + "[1/2ML] -" + (pp) + "[PP] +" +parseInt(def[2]) + "[Sit]";
        } else {
            var drolltarg = parseInt(myGet("DODGE_ML", defcharid, 0)) + "[ML] -" + (pp) + "[PP] +" +parseInt(def[2]) + "[Sit]";
        }

		var defstr = "&{template:harnroll} {{rolldesc=" + toke.get('name') + " attempts dodge}} {{rollresult=[["
		        +  state.MainGameNS.aroll + "]]}} {{rolltarget=[[" + state.MainGameNS.appstr + "]]}} {{rollsuccess=[["	+ state.MainGameNS.ais + "]]}} {{drollresult=[[" +  droll + "]]}} {{drolltarget=[["
		        + drolltarg+ "]]}}{{drollsuccess=[["	+ dis + "]]}}{{aresult=" + ares + "}}{{dresult=" + dres + "}} {{result=" + res + "}}";
	} else if (def[1] == "ignore") {


		var defstr = "&{template:harnroll} {{rolldesc=" + toke.get('name') + " ignores}} {{rollresult=[["
		        +  state.MainGameNS.aroll + "]]}} {{rolltarget=[[" + state.MainGameNS.appstr + "]]}} {{rollsuccess=[["	+ state.MainGameNS.ais + "]]}} {{aresult=" + ares + "}}{{dresult=" + dres + "}} {{result=" + res + "}}";
	} else {
		var notestr =   + state.MainGameNS.atkstrout + "<br><h4>"
				+ toke.get('name') + " " + def[1] + "s with a "
				+ defwepname + "</h4><br/>Penalty: " + pp
				+ "<br/>Other mods: "+ def[2] + "<br>Mastery Level: "	+ (parseInt(myGet(ojn.slice(0, -4) + "ML", defcharid, 0)) + parseInt(myGet(ojn.slice(0, -4) + "DEF", defcharid, 0)))
				+ "<h4>Result:</h4>" + res

		if (def[1] =="counterstrike") {
		    var drolltarg = myGet(ojn.slice(0, -4) + "ML", defcharid, 0) + "[ML] +" + myGet(ojn.slice(0, -4) + "ATK", defcharid, 0) + "[Atk] +" + myGet(ojn.slice(0, -4) + "HM", defcharid, 0) + "[HM] -" +  pp + "[PP] +" + def[2] + "[Sit]";

		} else {
		    var drolltarg = myGet(ojn.slice(0, -4) + "ML", defcharid, 0) + "[ML] +" + myGet(ojn.slice(0, -4) + "DEF", defcharid, 0) + "[Def] +" + myGet(ojn.slice(0, -4) + "HM", defcharid, 0) + "[HM] -" +  pp + "[PP] +" + def[2] + "[Sit]";

		}

		var defstr = "&{template:harnroll} {{rolldesc=" + toke.get('name') + " " + def[1] + "s with a " + defwepname + "}} {{rollresult=[["
		        +  state.MainGameNS.aroll + "]]}} {{rolltarget=[[" + state.MainGameNS.appstr + "]]}} {{rollsuccess=[["	+ state.MainGameNS.ais + "]]}} {{drollresult=[[" +  droll + "]]}} {{drolltarget=[["
		        + drolltarg+ "]]}}{{drollsuccess=[["+ dis + "]]}} {{aresult=" + ares + "}}{{dresult=" + dres + "}} {{result=" + res + "}}";

	}
	//log crits
	

	if (state.MainGameNS.asuc == "CS") {

		charLog(charid, ": Attack CS " + wepname,realtime,gametime)
	} else if (state.MainGameNS.asuc == "CF") {

		charLog(charid, ": Attack CF " + wepname,realtime,gametime)
	} 
	if (dsuc == "CS") {

		charLog(charid, ": Defend CS " + defwepname,realtime,gametime)
	} else if (dsuc == "CF") {

		charLog(charid, ": Defend CF " + defwepname,realtime,gametime)
	} 

	sendChat(msg.who, defstr);

}




//
//
// TABLES
//
//

var default_macros = {"helper-Physician-roll":"?{Treatment Bonus|Minor cut - Clean & Dress,30|Serious cut - Surgery,20|Grevious cut - Surgery,10|Minor stab - Clean & Dress,25|Serious stab - Clean & Dress,15|Grevious stab - Surgery,5|Minor bruise - Compress,30|Serious blunt fracture - Splint,20|Grevious blunt crush -Surgery/Splint,10|Bleeding wound - Tourniquet,50|No Bonus,0}",
			"Random-Char":"!rand"};
var default_abilities = {"Atk":"!attack @{selected|token_id} ?{aim zone|mid|high|low|arms|legs|torso|head|neck|skull|abdomen|face|thorax|shoulder|hip|thigh|knee|calf|foot|upper_arm|elbow|forearm|hand|groin} ?{Aspect|H|B|E|P} ?{Attack Type|melee|missle} ?{Mod|0} @{target|token_id} %{@{character_name}|helper-Weapons}",
			"ImproveSkill":"!improveskill @{character_id} %{@{character_name}|helper-SkillList}"};

var skilllist = {"Acrobatics": {"type":"PHYSICAL","sba":["STR","AGL","AGL"],"ssm":{"Nad":"2","Hir":"1"},"oml":"2","notes":"Trapeze, Tumbling, Vaulting, etc."},
"CLIMBING": {"type":"PHYSICAL","sba":["STR","DEX","AGL"],"ssm":{"Ula":"2","Ara":"2"},"oml":"4","notes":"None."},
"CONDITION": {"type":"PHYSICAL","sba":["STR","STA","WIL"],"ssm":{"Ula":"1","Lad":"1"},"oml":"5","notes":"None."},
"Dancing": {"type":"PHYSICAL","sba":["DEX","AGL","AGL"],"ssm":{"Tar":"2","Hir":"1","Tai":"1"},"oml":"2","notes":"Different styles may be specialties."},
"DODGE": {"type":"PHYSICAL","sba":["AGL","AGL","AGL"],"ssm":{},"oml":"5","notes":"Different styles may be specialties."},
"JUMPING": {"type":"PHYSICAL","sba":["STR","AGL","AGL"],"ssm":{"Nad":"2","Hir":"2"},"oml":"4","notes":"High Jump, Long Jump."},
"Legerdemain": {"type":"PHYSICAL","sba":["DEX","DEX","WIL"],"ssm":{"Sko":"2","Tai":"2","Tar":"2"},"oml":"1","notes":"Pursecutting, Conjuring, etc."},
"Searching": {"type":"PHYSICAL","sba":["DEX","EYE","INT"],"ssm":{},"oml":"2","notes":"Used to find hidden or secret doors or things."},
"Skiing": {"type":"PHYSICAL","sba":["STR","DEX","AGL"],"ssm":{"Mas":"2","Sko":"1","Lad":"1"},"oml":"1","notes":"None."},
"STEALTH": {"type":"PHYSICAL","sba":["AGL","HRG","WIL"],"ssm":{"Hir":"2","Tar":"2","Tai":"2"},"oml":"3","notes":"None."},
"Swimming": {"type":"PHYSICAL","sba":["STA","DEX","AGL"],"ssm":{"Sko":"1","Mas":"3","Lad":"3"},"oml":"1","notes":"None."},
"THROWING": {"type":"PHYSICAL","sba":["STR","DEX","EYE"],"ssm":{"Hir":"2","Tar":"1","Nad":"1"},"oml":"4","notes":"None."},
"Acting": {"type":"COMMUNICATION","sba":["AGL","VOI","INT"],"ssm":{"Tar":"1","Tai":"1"},"oml":"2","notes":"None."},
"AWARENESS": {"type":"COMMUNICATION","sba":["EYE","HRG","SML"],"ssm":{"Hir":"2","Tar":"2"},"oml":"4","notes":"None."},
"INTRIGUE": {"type":"COMMUNICATION","sba":["INT","AUR","WIL"],"ssm":{"Tai":"1","Tar":"1","Sko":"1"},"oml":"3","notes":"None."},
"Lovecraft": {"type":"COMMUNICATION","sba":["CML","AGL","VOI"],"ssm":{"Mas":"1","Ang":"1"},"oml":"3","notes":"GM Discretion."},
"MentalConflict": {"type":"COMMUNICATION","sba":["AUR","WIL","WIL"],"ssm":{},"oml":"3","notes":"None."},
"Musician": {"type":"COMMUNICATION","sba":["DEX","HRG","HRG"],"ssm":{"Mas":"1","Ang":"1"},"oml":"1","notes":"Each instrument is a separate skill."},
"ORATORY": {"type":"COMMUNICATION","sba":["CML","VOI","INT"],"ssm":{"Tar":"1"},"oml":"2","notes":"None."},
"RHETORIC": {"type":"COMMUNICATION","sba":["VOI","INT","WIL"],"ssm":{"Tai":"1","Tar":"1","Sko":"1"},"oml":"3","notes":"Command, Diplomacy, Intimidation."},
"SINGING": {"type":"COMMUNICATION","sba":["HRG","VOI","VOI"],"ssm":{"Mas":"1"},"oml":"3","notes":"Different styles may be specialties."},
"Tactics": {"type":"COMMUNICATION","sba":["INT","INT","WIL"],"ssm":{},"oml":"1","notes":"Small unit tactics successful roll gives advantages in skirmish."},
"Language": {"type":"COMMUNICATION","sba":["VOI","INT","WIL"],"ssm":{"Tai":"1"},"oml":"5","notes":"11 Each Language is a separate skill."},
"Script": {"type":"COMMUNICATION","sba":["DEX","EYE","INT"],"ssm":{"Tar":"1","Tai":"1"},"oml":"6","notes":"Each Script is a separate skill"},
"Agrik": {"type":"RITUAL","sba":["VOI","INT","STR"],"ssm":{"Nad":"2","Ang":"1","Ahn":"1"},"oml":"1","notes":"Liturgy, Theology, Scriptor"},
"Halea": {"type":"RITUAL","sba":["VOI","INT","CML"],"ssm":{"Tar":"2","Hir":"1","Mas":"1"},"oml":"1","notes":"Liturgy, Theology, Scriptor"},
"Ilvir": {"type":"RITUAL","sba":["VOI","INT","AUR"],"ssm":{"Sko":"2","Tai":"1","Ula":"1"},"oml":"1","notes":"Liturgy, Theology, Scriptor"},
"Larani": {"type":"RITUAL","sba":["VOI","INT","WIL"],"ssm":{"Ang":"2","Ahn":"1","Fen":"1"},"oml":"1","notes":"Liturgy, Theology, Scriptor"},
"Morgath": {"type":"RITUAL","sba":["VOI","INT","AUR"],"ssm":{"Lad":"2","Ahn":"1","Mas":"1"},"oml":"1","notes":"Liturgy, Theology, Scriptor"},
"Naveh": {"type":"RITUAL","sba":["VOI","INT","WIL"],"ssm":{"Mas":"2","Sko":"1","Tar":"1"},"oml":"1","notes":"Liturgy, Theology, Scriptor"},
"Peoni": {"type":"RITUAL","sba":["VOI","INT","DEX"],"ssm":{"Ara":"2","Ang":"1","Ula":"1"},"oml":"1","notes":"Liturgy, Theology, Scriptor"},
"Sarajin": {"type":"RITUAL","sba":["VOI","INT","STR"],"ssm":{"Fen":"2","Ara":"1","Lad":"1"},"oml":"1","notes":"Liturgy, Theology, Scriptor"},
"Save-Knor": {"type":"RITUAL","sba":["VOI","INT","INT"],"ssm":{"Tai":"2","Sko":"1","Tar":"1"},"oml":"1","notes":"Liturgy, Theology, Scriptor"},
"Siem": {"type":"RITUAL","sba":["VOI","INT","AUR"],"ssm":{"Hir":"2","Fen":"1","Ula":"1"},"oml":"1","notes":"Liturgy, Theology, Scriptor"},
"INITIATIVE": {"type":"COMBAT","sba":["AGL","WIL","WIL"],"ssm":{},"oml":"4","notes":"None."},
"UNARMED": {"type":"COMBAT","sba":["STR","DEX","AGL"],"ssm":{"Ang":"2","Mas":"2","Lad":"2","Ula":"2"},"oml":"4","notes":"Brawling, Wrestling, Martial Arts."},
"Riding": {"type":"COMBAT","sba":["DEX","AGL","WIL"],"ssm":{"Ula":"1","Ara":"1"},"oml":"1","notes":"Always averaged with Steed Initiative."},
"RIDING": {"type":"COMBAT","sba":["DEX","AGL","WIL"],"ssm":{"Ula":"1","Ara":"1"},"oml":"1","notes":"Always averaged with Steed Initiative."},
"Axe": {"type":"COMBAT","sba":["STR","STR","DEX"],"ssm":{"Ahn":"1","Fen":"1","Ang":"1"},"oml":"3","notes":"Battleaxe, Handaxe, Shorkana, Pickaxe, Sickle, Warhammer."},
"Blowgun": {"type":"COMBAT","sba":["STA","DEX","EYE"],"ssm":{"Hir":"2","Tar":"1","Nad":"1"},"oml":"4","notes":"None."},
"Bow": {"type":"COMBAT","sba":["STR","DEX","EYE"],"ssm":{"Hir":"1","Tar":"1","Nad":"1"},"oml":"2","notes":"Crossbow, Hartbow, Longbow, Shortbow."},
"Club": {"type":"COMBAT","sba":["STR","STR","DEX"],"ssm":{"Ula":"1","Ara":"1"},"oml":"4","notes":"Club, Mace, Maul, Morningstar."},
"Dagger": {"type":"COMBAT","sba":["DEX","DEX","EYE"],"ssm":{"Ang":"2","Nad":"2"},"oml":"3","notes":"Dagger, Keltan, Knife, Taburi."},
"Flail": {"type":"COMBAT","sba":["DEX","DEX","DEX"],"ssm":{"Hir":"1","Tar":"1","Nad":"1"},"oml":"1","notes":"Ball & Chain, Grainflail, Nachakas, Warflail."},
"Net": {"type":"COMBAT","sba":["DEX","DEX","EYE"],"ssm":{"Mas":"1","Sko":"1","Lad":"1"},"oml":"1","notes":"Cloak, Net, etc."},
"Polearm": {"type":"COMBAT","sba":["STR","STR","DEX"],"ssm":{"Ang":"1","Ara":"1"},"oml":"2","notes":"Lance, Glaive/Bill, Jousting Pole, Pike, Poleaxe."},
"Shield": {"type":"COMBAT","sba":["STR","DEX","DEX"],"ssm":{"Ula":"1","Lad":"1","Mas":"1"},"oml":"3","notes":"Buckler, Kite, Knight, Round, Tower shields."},
"Sling": {"type":"COMBAT","sba":["DEX","DEX","EYE"],"ssm":{"Hir":"1","Tar":"1","Nad":"1"},"oml":"1","notes":"Sling, Staffsling."},
"Spear": {"type":"COMBAT","sba":["STR","STR","DEX"],"ssm":{"Ara":"1","Fen":"1","Ula":"1"},"oml":"3","notes":"Javelin, Staff, Trident."},
"Sword": {"type":"COMBAT","sba":["STR","DEX","DEX"],"ssm":{"Ang":"3","Ahn":"1","Nad":"1"},"oml":"3","notes":"Bastard Sword, Battlesword, Broadsword, Estoc, Falchion, Longknife, Mang, Mankar, Shortsword."},
"Whip": {"type":"COMBAT","sba":["DEX","DEX","EYE"],"ssm":{"Hir":"1","Nad":"1"},"oml":"1","notes":"Isagra, Whip."},
"Agriculture": {"type":"LORE","sba":["STR","STA","WIL"],"ssm":{"Ula":"2","Ara":"2"},"oml":"2","notes":"Different crops may be specialties."},
"Alchemy": {"type":"LORE","sba":["SML","INT","AUR"],"ssm":{"Sko":"3","Tai":"2","Mas":"2"},"oml":"1","notes":"Different techniques may be specialties."},
"Animalcraft": {"type":"LORE","sba":["AGL","VOI","WIL"],"ssm":{"Ula":"1","Ara":"1"},"oml":"1","notes":"Horsecraft, Oxcraft, Birdcraft, etc."},
"Astrology": {"type":"LORE","sba":["EYE","INT","AUR"],"ssm":{"Tar":"1"},"oml":"1","notes":"Astromancy, Astronomy."},
"Brewing": {"type":"LORE","sba":["DEX","SML","SML"],"ssm":{"Sko":"3","Tai":"2","Mas":"2"},"oml":"2","notes":"Different beverage types may be specialties."},
"Ceramics": {"type":"LORE","sba":["DEX","DEX","EYE"],"ssm":{"Ula":"2","Ara":"2"},"oml":"2","notes":"Different artistic styles may be specialties."},
"Cookery": {"type":"LORE","sba":["DEX","SML","SML"],"ssm":{"Sko":"1"},"oml":"3","notes":"Cultural, religious, and regional specialties."},
"Drawing": {"type":"LORE","sba":["DEX","EYE","EYE"],"ssm":{"Sko":"1","Tai":"1"},"oml":"2","notes":"Cartography, Painting, Sketching, etc."},
"Driving": {"type":"LORE","sba":["DEX","AGL","WIL"],"ssm":{"Ula":"1","Ara":"1"},"oml":"1","notes":"Must specialize wagon or cart."},
"Embalming": {"type":"LORE","sba":["DEX","EYE","SML"],"ssm":{"Sko":"1","Ula":"1"},"oml":"1","notes":"Cultural, religious, and regional specialties."},
"Engineering": {"type":"LORE","sba":["DEX","INT","INT"],"ssm":{"Ula":"2","Ara":"2","Fen":"1"},"oml":"1","notes":"Fortifications, Mills, Siege Engines, etc"},
"Fishing": {"type":"LORE","sba":["DEX","EYE","WIL"],"ssm":{"Mas":"2","Lad":"2"},"oml":"3","notes":"Different techniques may be specialties."},
"Hidework": {"type":"LORE","sba":["DEX","DEX","EYE"],"ssm":{"Hir":"2","Tar":"1","Nad":"1"},"oml":"1","notes":"Bowyer, Fletcher."},
"Folklore": {"type":"LORE","sba":["VOI","INT","INT"],"ssm":{"Tai":"2"},"oml":"3","notes":"Cultural and/or regional specialties."},
"Foraging": {"type":"LORE","sba":["DEX","SML","INT"],"ssm":{"Ula":"2","Ara":"2"},"oml":"3","notes":"Different climate/terrain types may be specialties."},
"Glasswork": {"type":"LORE","sba":["DEX","EYE","WIL"],"ssm":{"Fen":"2"},"oml":"1","notes":"Different styles may be specialties."},
"Heraldry": {"type":"LORE","sba":["DEX","EYE","WIL"],"ssm":{"Sko":"1","Tai":"1"},"oml":"1","notes":"Cultural and/or regional specialties."},
"Herblore": {"type":"LORE","sba":["EYE","SML","INT"],"ssm":{"Ula":"3","Ara":"2"},"oml":"1","notes":"Different climate/terrain types may be specialties."},
"Hidework": {"type":"LORE","sba":["DEX","SML","WIL"],"ssm":{"Ula":"1","Ara":"1"},"oml":"2","notes":"Tanning, Parchment, Taxidermy, Leatherworking, etc."},
"Jewelcraft": {"type":"LORE","sba":["DEX","EYE","WIL"],"ssm":{"Fen":"3","Tar":"1","Ara":"1"},"oml":"1","notes":"Goldsmith, Silversmith, Gemcutter, Designer, etc."},
"Law": {"type":"LORE","sba":["VOI","INT","WIL"],"ssm":{"Tar":"1","Tai":"1"},"oml":"1","notes":"Cultural and/or regional specialties."},
"Lockcraft": {"type":"LORE","sba":["DEX","EYE","WIL"],"ssm":{"Fen":"1"},"oml":"1","notes":"Lockmaker, Lockpicker, Fine Mechanician, etc."},
"Masonry": {"type":"LORE","sba":["STR","DEX","INT"],"ssm":{"Ula":"2","Ara":"2"},"oml":"1","notes":"Architect, Builder, Stonecutter, Sculptor, etc."},
"Mathematics": {"type":"LORE","sba":["INT","INT","WIL"],"ssm":{"Tai":"3","Tar":"1","Sko":"1"},"oml":"1","notes":"Algebra, Bookkeeping, Geometry, etc."},
"Metalcraft": {"type":"LORE","sba":["STR","DEX","WIL"],"ssm":{"Fen":"3","Ahn":"1","Ang":"1"},"oml":"1","notes":"Different metal types (Tinsmith, Coppersmith, etc.)."},
"Milling": {"type":"LORE","sba":["STR","DEX","SML"],"ssm":{"Ula":"1"},"oml":"2","notes":"Baking, Milling."},
"Mining": {"type":"LORE","sba":["STR","EYE","INT"],"ssm":{"Ula":"2","Ara":"2","Fen":"1"},"oml":"1","notes":"Different mineral/metal types."},
"Needlework": {"type":"LORE","sba":["DEX","EYE","WIL"],"ssm":{"Ula":"0"},"oml":"1","notes":""},
"Packing": {"type":"LORE","sba":["DEX","EYE","INT"],"ssm":{"Fen":"1","Ula":"2","Ara":"2"},"oml":"1","notes":"Pack to maximize available space and knot tying."},
"Perfumery": {"type":"LORE","sba":["SML","SML","INT"],"ssm":{"Hir":"1","Sko":"1","Tar":"1"},"oml":"1","notes":"Incense, Scented Oils, Soap, etc."},
"Physician": {"type":"LORE","sba":["DEX","EYE","INT"],"ssm":{"Mas":"2","Sko":"1","Tai":"1"},"oml":"1","notes":"Homeopathy, Surgery, etc."},
"PHYSICIAN": {"type":"LORE","sba":["DEX","EYE","INT"],"ssm":{"Mas":"2","Sko":"1","Tai":"1"},"oml":"1","notes":"Homeopathy, Surgery, etc."},
"Piloting": {"type":"LORE","sba":["DEX","EYE","INT"],"ssm":{"Lad":"3","Mas":"1"},"oml":"1","notes":"Navigation, Sailing, Specific Waterways, etc."},
"Runecraft": {"type":"LORE","sba":["INT","AUR","AUR"],"ssm":{"Tai":"2","Sko":"1"},"oml":"1","notes":"Regional styles may be specialties."},
"Seamanship": {"type":"LORE","sba":["STR","DEX","AGL"],"ssm":{"Lad":"3","Mas":"1","Sko":"1"},"oml":"2","notes":"Rowing, Sailing (small boats), Sculling."},
"Shipwright": {"type":"LORE","sba":["STR","DEX","INT"],"ssm":{"Lad":"3","Mas":"1"},"oml":"1","notes":"Naval Architecture, Sailmaking, etc."},
"Survival": {"type":"LORE","sba":["STR","DEX","INT"],"ssm":{"Ula":"2","Ara":"1"},"oml":"3","notes":"Different climate/terrain types may be specialties."},
"Tarotry": {"type":"LORE","sba":["INT","AUR","WIL"],"ssm":{"Tar":"2","Tai":"2","Sko":"1","Hir":"1"},"oml":"1","notes":"Regional styles may be specialties."},
"Textilecraft": {"type":"LORE","sba":["DEX","DEX","EYE"],"ssm":{"Ula":"1","Ara":"1"},"oml":"2","notes":"Embroidery, Needlework, Tailoring, Weaving, etc."},
"Timbercraft": {"type":"LORE","sba":["STR","DEX","AGL"],"ssm":{"Ula":"3","Ara":"1"},"oml":"2","notes":"Cutting, Felling, Tree Care, etc."},
"Tracking": {"type":"LORE","sba":["EYE","SML","WIL"],"ssm":{"Ula":"3","Ara":"3"},"oml":"2","notes":"Specialist for any race or creature type."},
"Trap/Hunt": {"type":"LORE","sba":["EYE","SML","WIL"],"ssm":{"Ula":"3","Ara":"3"},"oml":"1","notes":"Specialist for any race or creature type."},
"Weaponcraft": {"type":"LORE","sba":["STR","DEX","WIL"],"ssm":{"Fen":"3","Ahn":"1","Ang":"1"},"oml":"1","notes":"Weapon or Armour group (eg. Swords or Mailcraft)."},
"Weatherlore": {"type":"LORE","sba":["INT","EYE","SML"],"ssm":{"Hir":"1","Tar":"1","Mas":"1","Lad":"1"},"oml":"3","notes":"Different climate types may be specialties."},
"Woodcraft": {"type":"LORE","sba":["DEX","DEX","WIL"],"ssm":{"Ula":"2","Ara":"1","Lad":"1"},"oml":"2","notes":"Cabinetry, Carpentry, Cooper, Carving, Wheelwright."},
"Lyahvi": {"type":"MAGIC","sba":["AUR","AUR","EYE"],"ssm":{"Ula":"-3","Ara":"-2","Fen":"-1","Ang":"1","Nad":"2","Nir":"3","Tar":"2","Tai":"1","Mas":"-1","Lad":"-2"},"oml":"1","notes":"none"},
"Peleahn": {"type":"MAGIC","sba":["AUR","AUR","AGL"],"ssm":{"Ula":"-1","Fen":"1","Ahn":"2","Ang":"3","Nad":"2","Nir":"1","Tai":"-1","Sko":"-2","Mas":"-3","Lad":"-2"},"oml":"1","notes":"none"},
"Jmorvi": {"type":"MAGIC","sba":["AUR","AUR","STR"],"ssm":{"Ula":"1","Ara":"2","Fen":"3","Ahn":"2","Ang":"1","Nir":"-1","Tar":"-2","Tai":"-3","Sko":"-2","Mas":"-1"},"oml":"1","notes":"none"},
"Fyvria": {"type":"MAGIC","sba":["AUR","AUR","SML"],"ssm":{"Ula":"3","Ara":"2","Fen":"1","Ang":"-1","Nad":"-2","Hir":"-3","Tar":"-2","Tai":"-1","Mas":"1","Lad":"2"},"oml":"1","notes":"none"},
"Odivshe": {"type":"MAGIC","sba":["AUR","AUR","DEX"],"ssm":{"Ula":"1","Fen":"-1","Ahn":"-2","Ang":"-3","Nad":"-2","Hir":"-1","Tai":"1","Sko":"2","Mas":"3","Lad":"2"},"oml":"1","notes":"none"},
"Savorya": {"type":"MAGIC","sba":["AUR","AUR","INT"],"ssm":{"Ula":"-1","Ara":"-2","Fen":"-3","Ahn":"-2","Ang":"-1","Hir":"1","Tar":"2","Tai":"3","Sko":"2","Mas":"1"},"oml":"1","notes":"none"},
"Neutral": {"type":"MAGIC","sba":["AUR","AUR","WIL"],"ssm":{"Ula":"0"},"oml":"1","notes":"none"}}





var autoskills = {"CLIMBING":"ML","CONDITION":"ML","DODGE":"ML","JUMPING":"ML","STEALTH":"ML","INITIATIVE":"ML","UNARMED":"ML","THROWING":"ML","RIDING":"ML","AWARENESS":"ML","INTRIGUE":"ML","ORATORY":"ML","RHETORIC":"ML","SINGING":"ML","PHYSICIAN":"ML"}
var autoskillsnames = ["Initiative","Unarmed","Dodge","Riding","Climbing","Condition","Jumping","Stealth","Throwing","Awareness","Intrigue","Oratory","Rhetoric","Singing","Physician"]
//
//
//


var prices = {"Axe, wood handle":{"price":12,"weight":3},
"Hatchet":{"price":6,"weight":1},
"Hoee":{"price":3,"weight":2},
"Iron, branding":{"price":18,"weight":5},
"Pick":{"price":8,"weight":5},
"Pitchfork":{"price":6,"weight":3},
"Saw, hack":{"price":10,"weight":2},
"Scythe":{"price":24,"weight":6},
"Spade":{"price":8,"weight":5},
"Ladder, 20'":{"price":15,"weight":30},
"Runestones, Set":{"price":40,"weight":2},
"Tankard, wood":{"price":2,"weight":0.25},
"Tankard, pewter":{"price":4,"weight":0.25},
"Spoon, wood":{"price":2,"weight":0.1},
"Spoon, pewter":{"price":4,"weight":0.1},
"Flint & steel":{"price":2,"weight":0.1},
"Tinderbox":{"price":6,"weight":0.5},
"Torch":{"price":1,"weight":0.5},
"Comb, wood":{"price":2,"weight":0.1},
"Comb, ivory":{"price":20,"weight":0.1},
"Bell, hand":{"price":5,"weight":0.2},
"Brush, hair":{"price":3,"weight":0.2},
"Backbag, small, canvas":{"price":4,"weight":0.5},
"Backbag, medium, leather":{"price":12,"weight":1},
"Beltpouch, leather":{"price":3,"weight":0.5},
"Beltpouch, silk":{"price":35,"weight":0.2},
"Mirror, bronze":{"price":12,"weight":0.25},
"Mirror, silver":{"price":300,"weight":0.25},
"Beltpouch, leather":{"price":3,"weight":0.5},
"Beltpouch, buckram":{"price":5,"weight":0.25},
"Beltpouch, silk":{"price":35,"weight":0.25},
"Notebook":{"price":50,"weight":2.0},
"Alchemical Recipe book":{"price":150,"weight":5.0},
"Tarot Cards, deck":{"price":75,"weight":0.5},
"Wineskin, small":{"price":6,"weight":6},
"Papercase, leather":{"price":180,"weight":3},
"Pipe, smoking":{"price":2,"weight":0.1},
"Rope, hemp, light, 100'":{"price":100,"weight":5},
"Scale/balance":{"price":72,"weight":5},
"Vellum, 10 sheets":{"price":20,"weight":0.1},
"Pen, metal":{"price":4,"weight":0.1},
"Pen, quill":{"price":1,"weight":0.1},
"Inkwell, glass":{"price":30,"weight":0.5},
"Wax, sealing":{"price":4,"weight":0.2},
"Vial, glass":{"price":24,"weight":0.1},
"Jar, glass, large":{"price":18,"weight":1.0},
"Calf Hide":{"price":16,"weight":10},
"Lambskin":{"price":3,"weight":5},
"Sheep Hide":{"price":4,"weight":7},
"Cow Hide":{"price":10,"weight":20},
"Beaver Hide":{"price":30,"weight":5},
"Deer Hide":{"price":6,"weight":7},
"Lantern, metal":{"price":12,"weight":1},
"Flask of oil (metal)":{"price":7,"weight":1},
"Cage, wood, small":{"price":7,"weight":2},
"Textbook":{"price":150,"weight":3},
"Frankincense, oz, jar":{"price":80,"weight":0.25},
"Perfume, oz, bottle":{"price":11,"weight":0.25},
"Elprequir, 1 dose":{"price":18,"weight":0.1},
"Rasakile, 1 dose":{"price":12,"weight":0.1},
"Opiates, 1 oz":{"price":106,"weight":0.1},
"Doshenkana, 1 dose":{"price":21,"weight":0.1},
"Doshenkana, 10 doses":{"price":175,"weight":1.0},
"Net, 2 fathom":{"price":120,"weight":5},
"Fishhooks, dozen":{"price":2,"weight":0.1},
"Fishing line, 50'":{"price":10,"weight":0.5},
"Physician's Bag":{"price":186,"weight":10},
"Portable writing kit":{"price":25,"weight":5},
"Hideworking kit":{"price":24,"weight":5},
"Textilcraft kit":{"price":24,"weight":5},
"Woodcarving kit":{"price":24,"weight":5},
"Carpentry kit":{"price":36,"weight":10},
"Lockpick kit":{"price":24,"weight":1},
"Armor Repair kit":{"price":24,"weight":10},
"Mason's kit":{"price":36,"weight":15},
"Alchemist's kit":{"price":72,"weight":10},
"Camp cooking kit":{"price":24,"weight":5},
"Metalcrafter's kit":{"price":24,"weight":10},
"Lute":{"price":200,"weight":5},
"Lyre":{"price":120,"weight":5},
"Flute":{"price":3,"weight":0.5},
"Pipes":{"price":60,"weight":1},
"Recorder":{"price":4,"weight":0.5},
"Gittern":{"price":150,"weight":5},
"Harp":{"price":300,"weight":10},
"Tabol":{"price":20,"weight":2},
"Belt, leather":{"price":10,"weight":1},
"Boots, calf, cloth":{"price":38,"weight":2.2},
"Boots, knee, cloth":{"price":44,"weight":2.8},
"Boots, calf, leather":{"price":64,"weight":3.2},
"Boots, knee, leather":{"price":76,"weight":3.8},
"Holy Symbol, brass":{"price":12,"weight":0.1},
"Holy Symbol, iron":{"price":18,"weight":0.1},
"Holy Symbol, wood":{"price":8,"weight":0.1},
"Holy Symbol, silver":{"price":32,"weight":0.1},
"Holy Symbol, gold":{"price":120,"weight":0.1},
"Sandals, leather":{"price":8,"weight":1},
"Scabbard, dagger":{"price":12,"weight":0.5},
"Scabbard, sword":{"price":48,"weight":1},
"Scabbard, battlesword":{"price":150,"weight":3},
"Shoes, leather":{"price":24,"weight":1.2},
"Shoes, cloth ":{"price":12,"weight":1},
"Cowl/hood, worsted":{"price":28,"weight":0.8},
"Cowl/hood, beaver":{"price":27,"weight":1.6},
"Cowl/hood, buckram":{"price":9,"weight":0.8},
"Cowl/hood, ermine":{"price":60,"weight":1.6},
"Cowl/hood, leather":{"price":12,"weight":1.6},
"Cowl/hood, canvas":{"price":4,"weight":0.8},
"Cowl/hood, waxed canvas":{"price":9,"weight":0.8},
"Cowl/hood, linen":{"price":6,"weight":0.8},
"Cowl/hood, russet":{"price":18,"weight":0.8},
"Cowl/hood, sealskin":{"price":30,"weight":2.4},
"Cowl/hood, serge":{"price":7,"weight":0.8},
"Cowl/hood, silk":{"price":55,"weight":0.8},
"Cloak, worsted":{"price":312,"weight":6.6},
"Cloak, beaver":{"price":302,"weight":10},
"Cloak, buckram":{"price":101,"weight":6.6},
"Cloak, ermine":{"price":670,"weight":10},
"Cloak, leather":{"price":134,"weight":9},
"Cloak, canvas":{"price":45,"weight":6.6},
"Cloak, waxed canvas":{"price":90,"weight":6.6},
"Cloak, linen":{"price":67,"weight":6.6},
"Cloak, russet":{"price":201,"weight":6.6},
"Cloak, sealskin":{"price":335,"weight":12},
"Cloak, serge":{"price":78,"weight":6.6},
"Cloak, silk":{"price":614,"weight":5.6},
"Gloves, silk":{"price":46,"weight":0.3},
"Gloves, buckram":{"price":8,"weight":0.4},
"Gloves, russet":{"price":15,"weight":0.4},
"Gloves, leather":{"price":10,"weight":0.6},
"Hat/Cap, silk":{"price":36,"weight":0.4},
"Hat/Cap, serge":{"price":5,"weight":0.4},
"Hat/Cap, buckram":{"price":6,"weight":0.4},
"Hat/Cap, russet":{"price":12,"weight":0.4},
"Hat/Cap, worsted":{"price":19,"weight":0.4},
"Hat/Cap, leather":{"price":8,"weight":0.8},
"Hat/Cap, beaver":{"price":18,"weight":0.8},
"Hat/Cap, sealskin":{"price":20,"weight":1.2},
"Hat/Cap, ermine":{"price":40,"weight":0.8},
"Leggings, silk":{"price":419,"weight":3.5},
"Leggings, linen":{"price":46,"weight":4.4},
"Leggings, worsted":{"price":200,"weight":4.4},
"Leggings, canvas":{"price":15,"weight":4.4},
"Leggings, waxed canvas":{"price":30,"weight":4.4},
"Leggings, serge":{"price":54,"weight":4.4},
"Leggings, buckram":{"price":69,"weight":4.4},
"Leggings, russet":{"price":141,"weight":4.4},
"Leggings, leather":{"price":92,"weight":8.8},
"Leggings, beaver":{"price":207,"weight":8.8},
"Leggings, sealskin":{"price":230,"weight":9.2},
"Pants, cloth":{"price":100,"weight":4.0},
"Dress, lightsilk":{"price":1719,"weight":1.5},
"Dress, lightlinen":{"price":81,"weight":2.1},
"Robe, silk":{"price":719,"weight":7},
"Robe, linen":{"price":41,"weight":7.8},
"Robe, lightlinen":{"price":41,"weight":2.4},
"Robe, serge":{"price":93,"weight":7.8},
"Robe, buckram":{"price":119,"weight":7.8},
"Robe, russet":{"price":242,"weight":7.8},
"Robe, worsted":{"price":373,"weight":7.8},
"Robe, beaver":{"price":356,"weight":15.6},
"Robe, sealskin":{"price":395,"weight":19},
"Robe, ermine":{"price":786,"weight":15.6},
"Shirt, silk":{"price":391,"weight":3.4},
"Shirt, linen":{"price":43,"weight":3.6},
"Shirt, serge":{"price":51,"weight":3.6},
"Shirt, buckram":{"price":65,"weight":3.6},
"Shirt, russet":{"price":132,"weight":3.6},
"Shirt, worsted":{"price":203,"weight":3.6},
"Shirt, leather":{"price":120,"weight":8},
"Shirt, beaver":{"price":194,"weight":8},
"Shirt, sealskin":{"price":215,"weight":11},
"Shirt, ermine":{"price":428,"weight":8},
"Shirt(Long), leather":{"price":300,"weight":13.4},
"Surcoat, silk":{"price":491,"weight":5},
"Surcoat, linen":{"price":51,"weight":5.2},
"Surcoat, buckram":{"price":81,"weight":5.2},
"Surcoat, leather":{"price":151,"weight":10.4},
"Tunic, silk":{"price":519,"weight":4.2},
"Tunic, linen":{"price":57,"weight":4.4},
"Tunic, lightlinen":{"price":57,"weight":1.4},
"Tunic, canvas":{"price":12,"weight":4.4},
"Tunic, waxed canvas":{"price":24,"weight":4.4},
"Tunic, serge":{"price":67,"weight":4.4},
"Tunic, buckram":{"price":86,"weight":4.4},
"Tunic, russet":{"price":174,"weight":4.4},
"Tunic, worsted":{"price":269,"weight":4.4},
"Tunic, leather":{"price":114,"weight":8.8},
"Tunic, beaver":{"price":257,"weight":8.8},
"Tunic, sealskin":{"price":285,"weight":13.2},
"Tunic, ermine":{"price":567,"weight":8.8},
"Vest, silk":{"price":246,"weight":2.5},
"Vest, linen":{"price":27,"weight":2.8},
"Vest, serge":{"price":32,"weight":2.8},
"Vest, buckram":{"price":41,"weight":2.8},
"Vest, russet":{"price":83,"weight":2.8},
"Vest, worsted":{"price":127,"weight":2.8},
"Vest, leather":{"price":54,"weight":5.6},
"Vest, beaver":{"price":122,"weight":5.6},
"Vest, sealskin":{"price":135,"weight":7},
"Vest, ermine":{"price":269,"weight":5.6},
"Cap, quilt":{"price":16,"weight":1.2},
"Cowl, quilt":{"price":32,"weight":2.4},
"Gambeson, quilt":{"price":200,"weight":19.5},
"Leggings, quilt":{"price":184,"weight":9.2},
"Pants, quilt":{"price":174,"weight":8.6},
"Tunic, quilt":{"price":176,"weight":13.2},
"Ailettes, kurbul":{"price":20,"weight":1.0},
"Backplate, kurbul":{"price":60,"weight":3.0},
"Breastplate, kurbul":{"price":60,"weight":3.0},
"Breastplate-Backplate, kurbul":{"price":120,"weight":6.0},
"Coudes, kurbul":{"price":10,"weight":0.5},
"Greaves, kurbul":{"price":50,"weight":2.5},
"Gorget, kurbul":{"price":5,"weight":0.5},
"Halfhelm, kurbul":{"price":20,"weight":1.0},
"Kneecops, kurbul":{"price":15,"weight":0.8},
"Rerebraces, kurbul":{"price":30,"weight":1.5},
"Vambraces, kurbul":{"price":25,"weight":1.3},
"Cuirass, kurbul":{"price":120,"weight":6.0},
"Byrnie, ring":{"price":308,"weight":17.6},
"Shirt, ring":{"price":301,"weight":22.4},
"Gauntlets, ring":{"price":28,"weight":1.6},
"Halfhelm, ring":{"price":28,"weight":1.0},
"Longshirt, ring":{"price":350,"weight":22.2},
"Leggings, ring":{"price":308,"weight":17.6},
"Pants, ring":{"price":280,"weight":16.4},
"Vest, ring":{"price":196,"weight":14.0},
"Cowl, long, ring":{"price":63,"weight":4.0},
"Cowl, short, ring":{"price":42,"weight":3.6},
"Hauberk, long, ring":{"price":420,"weight":26},
"Hauberk, short, ring":{"price":399,"weight":24},
"Byrnie, scale":{"price":440,"weight":30.8},
"Vest, scale":{"price":280,"weight":19.6},
"Habergeon, scale":{"price":430,"weight":41.2},
"Hauberk, long, scale":{"price":600,"weight":50},
"Hauberk, short, scale":{"price":570,"weight":45.5},
"Byrnie, mail":{"price":660,"weight":22.0},
"Cowl, short, mail":{"price":120,"weight":4.0},
"Cowl, long, mail":{"price":135,"weight":6.0},
"Leggings, mail":{"price":615,"weight":22.0},
"Pants, mail":{"price":184,"weight":20.5},
"Mittens, mail":{"price":60,"weight":2.0},
"Habergeon, mail":{"price":345,"weight":25.0},
"Hauberk, long, mail":{"price":900,"weight":27.0},
"Hauberk, short, mail":{"price":855,"weight":26.0},
"Hauberk, mail":{"price":855900,"weight":27.0},
"Ailettes, plate":{"price":100,"weight":3.2},
"Backplate, plate":{"price":300,"weight":9.6},
"Breastplate, plate":{"price":300,"weight":9.6},
"Coudes, plate":{"price":50,"weight":1.6},
"Greathelm, plate":{"price":275,"weight":8.8},
"Greaves, plate":{"price":250,"weight":8.8},
"Halfhelm, plate":{"price":100,"weight":3.2},
"Kneecops, plate":{"price":75,"weight":2.4},
"Rerebraces, plate":{"price":150,"weight":4.8},
"Three-quarter helm, plate":{"price":175,"weight":5.6},
"Vambraces, plate":{"price":125,"weight":4.0},
"Cuirass, plate":{"price":600,"weight":19.2},
"Shield(Round)":{"price":42,"weight":6},
"Shield(Kite)":{"price":72,"weight":7},
"Shield(Knight)":{"price":60,"weight":5},
"Shield(Tower)":{"price":96,"weight":8},
"Shield(Buckler)":{"price":24,"weight":3},
"Dagger":{"price":24,"weight":1},
"Keltan":{"price":36,"weight":2},
"Knife":{"price":6,"weight":1},
"Taburi":{"price":20,"weight":1},
"Sword(Longknife)":{"price":96,"weight":1},
"Sword(Shortsword)":{"price":90,"weight":2},
"Sword(Broadsword)":{"price":150,"weight":3},
"Mang":{"price":150,"weight":3},
"Mankar":{"price":150,"weight":2},
"Sword(Falchion)":{"price":120,"weight":4},
"Sword(Bastard Sword)":{"price":180,"weight":5},
"Sword(Battlesword)":{"price":230,"weight":8},
"Club":{"price":12,"weight":3},
"Club(Mace)":{"price":84,"weight":4},
"Club(Morningstar)":{"price":48,"weight":5},
"Club(Maul)":{"price":24,"weight":7},
"Hatchet":{"price":12,"weight":2},
"Axe(Handaxe)":{"price":72,"weight":3},
"Axe(Warhammer)":{"price":90,"weight":5},
"Axe(Battleaxe)":{"price":100,"weight":6},
"Flail(Grainflail)":{"price":12,"weight":2},
"Flail(Ball & Chain)":{"price":60,"weight":4},
"Flail(Warflail)":{"price":60,"weight":5},
"Spear(Staff)":{"price":36,"weight":4},
"Spear(Javelin)":{"price":48,"weight":3},
"Spear(Spear)":{"price":60,"weight":5},
"Spear(Trident)":{"price":72,"weight":6},
"Polearm(Lance)":{"price":120,"weight":8},
"Polearm(Poleaxe)":{"price":96,"weight":8},
"Bow(Longbow)":{"price":36,"weight":3},
"Bow(Shortbow)":{"price":24,"weight":2},
"Bow(Hartbow)":{"price":96,"weight":2},
"Arrow, dozen":{"price":15,"weight":2},
"Quiver":{"price":8,"weight":1},
"Anklet, Bone/Horn":{"price":3,"weight":0.125},
"Anklet, Copper":{"price":5,"weight":0.125},
"Anklet, Gold with gem":{"price":3000,"weight":0.125},
"Anklet, Gold":{"price":2400,"weight":0.125},
"Anklet, Silver":{"price":120,"weight":0.125},
"Broach, Bone/Horn":{"price":1,"weight":0.03},
"Broach, Copper":{"price":3,"weight":0.03},
"Broach, Gold with gem":{"price":1000,"weight":0.03},
"Broach, Gold":{"price":600,"weight":0.03},
"Broach, Silver":{"price":30,"weight":0.03},
"Circlet, Bone/Horn":{"price":10,"weight":0.3125},
"Circlet, Copper":{"price":20,"weight":0.3125},
"Circlet, Gold with gem":{"price":7000,"weight":0.3125},
"Circlet, Gold":{"price":6000,"weight":0.3125},
"Circlet, Silver with gem":{"price":600,"weight":0.3125},
"Circlet, Silver":{"price":300,"weight":0.3125},
"Earing, Bone/Horn":{"price":1,"weight":0.01},
"Earing, Copper":{"price":1,"weight":0.01},
"Earing, Gold with gem":{"price":425,"weight":0.01},
"Earing, Gold":{"price":225,"weight":0.01},
"Earing, Silver":{"price":15,"weight":0.01},
"Necklace, Bone/Horn":{"price":5,"weight":0.25},
"Necklace, Copper":{"price":8,"weight":0.25},
"Necklace, Gold with gem":{"price":6000,"weight":0.25},
"Necklace, Gold":{"price":4800,"weight":0.25},
"Necklace, Silver":{"price":240,"weight":0.25},
"Pendant, Bone/Horn":{"price":5,"weight":0.05},
"Pendant, Copper":{"price":8,"weight":0.05},
"Pendant, Gold with gem":{"price":1400,"weight":0.05},
"Pendant, Gold":{"price":900,"weight":0.05},
"Pendant, Silver":{"price":45,"weight":0.05},
"Ring, Bone/Horn":{"price":1,"weight":0.03},
"Ring, Copper":{"price":1,"weight":0.03},
"Ring, Gold with gem":{"price":900,"weight":0.03},
"Ring, Gold":{"price":600,"weight":0.03},
"Ring, Silver":{"price":30,"weight":0.03},
"q1":{"price":1,"weight":1.0},
"Gold Crown":{"price":320,"weight":.06},
"Pence":{"price":1,"weight":.004},
"Lightsabre":{"price":9600000,"weight":0.2},
"Sword(StarSteel)":{"price":150,"weight":2},
"Bow(Crossbow)":{"price":600,"weight":5.0},
"Polearm(Pike)":{"price":96,"weight":12},
"Unarmed(Punch)":{"price":0,"weight":0},
"Unarmed(Kick)":{"price":0,"weight":0,},
"Body, nat1":{"price":0,"weight":0},
"Body, fur":{"price":0,"weight":0},
"Body, mail":{"price":0,"weight":0},
"Body, plate ":{"price":0,"weight":0},
"Hauberk, long, mail+2":{"price":9000,"weight":27.0},
"Bow(Minicrossbow)":{"price":1800,"weight":2.5},
"Skull":{"price":0,"weight":0}

}


var attack_melee = {"block":[["BF","AF","DTA","DTA"],
["DF","Block","DTA","DTA"],
["A*2","A*1","Block","DTA"],
["A*3","A*2","A*1","Block"]],
"counterstrike":[["BF","AF","D*2","D*3"],
["DF","Block","D*1","D*2"],
["A*3","A*2","B*1","D*1"],
["A*4","A*3","A*1","B*2"]],
"dodge":[["BS","AS","DTA","DTA"],
["DS","miss","miss","DTA"],
["A*2","A*1","miss","miss"],
["A*3","A*2","A*1","miss"]],
"ignore":[["DTA"],
["A*1"],
["A*3"],
["A*4"]]
}


var attack_missile = {"block":[["Wild","Wild","Wild","Wild"],
["miss","miss","miss","miss"],
["M*2","M*1","Block","Block"],
["M*3","M*2","M*1","Block"]],
"dodge":[["Wild","Wild","Wild","Wild"],
["miss","miss","miss","miss"],
["M*2","M*1","miss","miss"],
["M*3","M*2","M*1","miss"]],
"ignore":[["Wild"],
["miss"],
["M*2"],
["M*3"]],
"counterstrike":[["Wild","Wild","Wild","Wild"],
["miss","miss","miss","miss"],
["M*2","M*2","M*2","M*2"],
["M*3","M*3","M*3","M*3"]]
}

var coverage2loc = {
"Sk":{"LOC":"SKULL","COV":"","AQ":0,"B":0,"E":0,"P":0,"F":0},
"Fa":{"LOC":"FACE","COV":"","AQ":0,"B":0,"E":0,"P":0,"F":0},
"Nk":{"LOC":"NECK","COV":"","AQ":0,"B":0,"E":0,"P":0,"F":0},
"Sh":{"LOC":"SHOULDER","COV":"","AQ":0,"B":0,"E":0,"P":0,"F":0},
"Ua":{"LOC":"UPPERARM","COV":"","AQ":0,"B":0,"E":0,"P":0,"F":0},
"El":{"LOC":"ELBOW","COV":"","AQ":0,"B":0,"E":0,"P":0,"F":0},
"Fo":{"LOC":"FOREARM","COV":"","AQ":0,"B":0,"E":0,"P":0,"F":0},
"Ha":{"LOC":"HAND","COV":"","AQ":0,"B":0,"E":0,"P":0,"F":0},
"Tx":{"LOC":"THORAX","COV":"","AQ":0,"B":0,"E":0,"P":0,"F":0},
"Ab":{"LOC":"ABDOMEN","COV":"","AQ":0,"B":0,"E":0,"P":0,"F":0},
"Gr":{"LOC":"GROIN","COV":"","AQ":0,"B":0,"E":0,"P":0,"F":0},
"Hp":{"LOC":"HIP","COV":"","AQ":0,"B":0,"E":0,"P":0,"F":0},
"Th":{"LOC":"THIGH","COV":"","AQ":0,"B":0,"E":0,"P":0,"F":0},
"Kn":{"LOC":"KNEE","COV":"","AQ":0,"B":0,"E":0,"P":0,"F":0},
"Ca":{"LOC":"CALF","COV":"","AQ":0,"B":0,"E":0,"P":0,"F":0},
"Ft":{"LOC":"FOOT","COV":"","AQ":0,"B":0,"E":0,"P":0,"F":0}
}



var hit_location_table = [["01-15","01-05","-","SKULL","M1","S2","S3","K4","K5","Sk","-","-","-","-","01-56","01-00","-","-","-","-","-","-","-","-","-","-","-","-","-","-"],
["16-30","06-10","-","FACE","M1","S2","S3","G4","K5",                           "Fa","-","-","-","-","57-87","-","-","01-00","-","-","-","-","-","-","-","-","-","-","-","-"],
["31-45","11-15","-","NECK","M1","S2","S3","K4","K5Amp",                        "Nk","01-00","-","-","-","88-00","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-"],
["46-57","16-27","-","SHOULDER","FumM1","FumS2","FumS3","FumG4","FumK4",        "Sh","-","-","-","01-09","-","-","-","-","-","01-00","-","-","-","-","-","-","-","-","-","-"],
["58-69","28-33","-","UPPERARM","FumM1","FumM1","FumS2","FumS3","FumG4Amp",     "Ua","-","01-45","-","-","-","-","-","-","-","-","-","-","-","-","-","01-00","-","-","-","-"],
["70-73","34-35","-","ELBOW","FumM1","FumS2","FumS3","FumG4","FumG5Amp",        "El","-","46-50","-","-","-","-","-","-","-","-","-","-","-","-","-","-","01-00","-","-","-"],
["74-81","36-39","01-06","FOREARM","FumM1","FumM1","FumS2","FumS3","FumG4Amp",  "Fo","-","51-91","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","01-00","-","-"],
["82-85","40-43","07-12","HAND","FumM1","FumS2","FumS3","FumG4","FumG5Amp",     "Ha","-","92-00","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","01-00","-"],
["86-95","44-60","13-19","THORAX","M1","S2","S3","G4","K5",                     "Tx","-","-","-","10-49","-","-","-","-","01-00","-","-","-","-","-","-","-","-","-","-","-"],
["95-00","61-70","20-29","ABDOMEN","M1","S2","S3","K4","K5",                    "Ab","-","-","-","50-72","-","-","01-00","-","-","-","-","-","-","-","-","-","-","-","-","-"],
["-","71-74","30-35","GROIN","M1","S2","S3","G4","G5Amp",                       "Gr","-","-","-","73-83","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","01-00"],
["-","75-80","36-49","HIP","StuM1","StuS2","StuS3","StuG4","StuK4",             "Hp","-","-","-","84-00","-","-","-","-","-","-","01-00","-","-","-","-","-","-","-","-","-"],
["-","81-88","50-70","THIGH","StuM1","StuS2","StuS3","StuG4","StuK4Amp",        "Th","-","-","01-49","-","-","-","-","-","-","-","-","01-00","-","-","-","-","-","-","-","-"],
["-","89-90","71-78","KNEE","StuM1","StuS2","StuS3","StuG4","StuG5Amp",         "Kn","-","-","50-54","-","-","-","-","-","-","-","-","-","01-00","-","-","-","-","-","-","-"],
["-","91-96","79-92","CALF","StuM1","StuM1","StuS2","StuS3","StuG4Amp",         "Ca","-","-","55-85","-","-","-","-","-","-","-","-","-","-","01-00","-","-","-","-","-","-"],
["-","97-00","93-00","FOOT","StuM1","StuS2","StuS3","StuG4","StuG5Amp",         "Ft","-","-","86-00","-","-","-","-","-","-","-","-","-","-","-","01-00","-","-","-","-","-"]]

var hit_loc_penalty = {"high":{"index":0,"penalty":10},
                        "mid":{"index":1,"penalty":0},
                        "low":{"index":2,"penalty":10},
                        "arms":{"index":11,"penalty":20},
                        "legs":{"index":12,"penalty":20},
                        "torso":{"index":13,"penalty":20},
                        "head":{"index":14,"penalty":25},
                        "neck":{"index":10,"penalty":35},
                        "skull":{"index":15,"penalty":30},
                        "abdomen":{"index":16,"penalty":25},
                        "face":{"index":17,"penalty":35},
                        "thorax":{"index":18,"penalty":25},
                        "shoulder":{"index":19,"penalty":25},
                        "hip":{"index":20,"penalty":25},
                        "thigh":{"index":21,"penalty":25},
                        "knee":{"index":22,"penalty":30},
                        "calf":{"index":23,"penalty":25},
                        "foot":{"index":24,"penalty":30},
                        "upper_arm":{"index":25,"penalty":25},
                        "elbow":{"index":26,"penalty":30},
                        "forearm":{"index":27,"penalty":25},
                        "hand":{"index":28,"penalty":30},
                        "groin":{"index":29,"penalty":35}}
                        

var armor_coverage = {"Body":{"zone":"body","coverage":["Sk","Nk","Fa","Ft","Ha","Ua","Sh","Tx","Ab","Hp","Gr","Fo","El","Th","Kn","Ca"]},
"Skull":{"zone":"head","coverage":["Sk","Fa"]},
"Cap":{"zone":"head","coverage":["Sk"]},
"Hat/Cap":{"zone":"head","coverage":["Sk"]},
"Hood":{"zone":"head","coverage":["Sk","Nk"]},
"Cowl/hood":{"zone":"head","coverage":["Sk","Nk"]},
"Cowl, short":{"zone":"head","coverage":["Sk","Nk"]},
"Cowl":{"zone":"head","coverage":["Sk","Nk"]},
"Cowl, long":{"zone":"head","coverage":["Sk","Nk","Sh"]},
"Gorget":{"zone":"head","coverage":["Nk"]},
"Vest":{"zone":"body","coverage":["Sh","Tx","Ab"]},
"Surcoat":{"zone":"robe","coverage":["Sh","Tx","Ab","Hp","Gr","Th"]},
"Cloak":{"zone":"clok","coverage":["Sh","Tx","Hp","Ua","Gr"]},
"Cloak(Long), hood":{"zone":"body","coverage":["Sk","Nk","Sh","Tx","Ab","Hp","Gr","Th","Kn","Ua"]},
"Tunic":{"zone":"body","coverage":["Ua","Sh","Tx","Ab","Hp","Gr"]},
"Tunic, long":{"zone":"body","coverage":["Ua","Sh","Tx","Ab","Hp","Gr","Th"]},
"Dress":{"zone":"robe","coverage":["Ua","Sh","Tx","Ab","Hp","Gr","Th","Kn","Ca"]},
"Robe":{"zone":"robe","coverage":["Ua","Sh","Tx","Ab","Hp","Gr","Fo","El","Th","Kn","Ca"]},
"Leggings":{"zone":"legs","coverage":["Hp","Gr","Th","Kn","Ca","Ft"]},
"Pants":{"zone":"legs","coverage":["Hp","Gr","Th","Kn","Ca"]},
"Gambeson":{"zone":"body","coverage":["Fo","El","Ua","Sh","Tx","Ab","Hp","Gr","Th"]},
"Shoes":{"zone":"feet","coverage":["Ft"]},
"Sandals":{"zone":"feet","coverage":["Ft"]},
"Boots, calf":{"zone":"feet","coverage":["Ca","Ft"]},
"Boots, knee":{"zone":"feet","coverage":["Kn","Ca","Ft"]},
"Gauntlets":{"zone":"hand","coverage":["Ha"]},
"Gloves":{"zone":"hand","coverage":["Ha"]},
"Mittens":{"zone":"hand","coverage":["Ha"]},
"Greathelm":{"zone":"head","coverage":["Sk","Fa","Nk"]},
"Halfhelm":{"zone":"head","coverage":["Sk"]},
"Three-quarter helm":{"zone":"head","coverage":["Sk","Fa"]},
"Breastplate":{"zone":"thor","coverage":["Tx","Ab"]},
"Backplate":{"zone":"thor","coverage":["Tx","Ab"]},
"Breastplate-Backplate":{"zone":"thor","coverage":["Tx","Ab"]},
"Skirt, short":{"zone":"thor","coverage":["Hp","Gr"]},
"Skirt, long":{"zone":"thor","coverage":["Hp", "Gr","Th"]},
"Cuirass":{"zone":"thor","coverage":["Tx"]},
"Ailettes":{"zone":"aile","coverage":["Sh"]},
"Rerebraces":{"zone":"rere","coverage":["Ua"]},
"Vambraces":{"zone":"vamb","coverage":["Fo"]},
"Coudes":{"zone":"coud","coverage":["El"]},
"Kneecops":{"zone":"knee","coverage":["Kn"]},
"Greaves":{"zone":"grev","coverage":["Ca"]},
"Hauberk, long":{"zone":"body","coverage":["Fo","El","Ua","Sh","Tx","Ab","Hp","Gr","Th","Kn"]},
"Hauberk":{"zone":"body","coverage":["Fo","El","Ua","Sh","Tx","Ab","Hp","Gr","Th"]},
"Hauberk, short":{"zone":"body","coverage":["Ua","Sh","Tx","Ab","Hp","Gr","Th"]},
"Haubergeon":{"zone":"body","coverage":["Fo","El","Ua","Sh","Tx","Ab","Hp","Gr"]},
"Shirt":{"zone":"body","coverage":["Fo","El","Ua","Sh","Tx","Ab","Hp","Gr"]},
"Shirt(Long)":{"zone":"body","coverage":["Fo","El","Ua","Sh","Tx","Ab","Hp","Gr","Th"]},
"ShortSleeveShirt":{"zone":"body","coverage":["Ua","Sh","Tx","Ab","Hp","Gr"]},
"ShortSleeveShirt(long)":{"zone":"body","coverage":["Ua","Sh","Tx","Ab","Hp","Gr","Th"]},
"Byrnie, long":{"zone":"body","coverage":["Ua","Sh","Tx","Ab","Hp","Gr","Th"]},
"Byrnie":{"zone":"body","coverage":["Ua","Sh","Tx","Ab","Hp","Gr"]}}


var armor_prot = {"nat1":["nat1","1","1","1","1"],
"nat2":["nat2","2","2","2","2"],
"nat3":["nat3","3","3","3","3"],
"fur(light)":["fur","3","2","2","3"],
"fur(thick)":["fur","5","3","2","4"],
"cloth":["cloth","1","1","1","1"],
"canvas":["cloth","1","1","1","1"],
"waxed canvas":["cloth","1","1","1","1"],
"silk":["cloth","1","1","1","1"],
"linen":["cloth","1","1","1","1"],
"lightsilk":["cloth","0","1","0","0"],
"lightlinen":["cloth","0","1","0","1"],
"serge":["cloth","1","1","1","1"],
"buckram":["cloth","1","1","1","1"],
"russet":["cloth","1","1","1","1"],
"worsted":["cloth","1","1","1","1"],
"quilt":["quilt","5","3","2","4"],
"quilt+1":["quilt+1","6","4","3","5"],
"sealskin":["quilt","5","3","2","5"],
"leather":["leather","2","4","3","3"],
"leather+1":["leather+1","3","5","4","4"],
"leather+2":["leather+2","4","6","5","5"],
"beaver":["leather","2","4","3","3"],
"ermine":["leather","2","4","3","3"],
"kurbul":["kurbul","4","5","4","3"],
"kurbul+1":["kurbul+1","5","6","5","4"],
"ring":["ring","3","6","4","3"],
"ring+1":["ring+1","4","7","5","4"],
"ring+2":["ring+2","5","8","6","5"],
"mail":["mail","2","8","5","1"],
"mail+1":["mail+1","3","9","6","2"],
"mail+2":["mail+2","4","10","7","3"],
"mail+3":["mail+3","5","11","8","4"],
"scale":["scale","5","9","4","5"],
"plate":["plate","6","10","6","2"],
"plate+1":["plate+1","7","11","7","3"],
"plate+2":["plate+2","8","12","8","4"],
"gargun":["nat","4","3","1","3"],
"horse":["nat","4","3","1","3"],
"dog":["nat","4","3","1","3"],
"wolf":["nat","4","3","1","3"],
"Dire wolf":["nat","5","4","2","4"],
"Brown bear":["nat","6","4","3","5"],
"belt lizard king":["magic belt","2","4","3","3"]
}


var weapons_table = {"Shield(Round)":["13","5","20","0","2","-","-"],
"Shield(Kite)":["14","5","25","0","3","-","-"],
"Shield(Knight)":["13","5","20","0","2","-","-"],
"Shield(Tower)":["14","5","25","0","3","-","-"],
"Shield(Buckler)":["12","5","15","0","1","-","-"],
"Dagger":["11","5","5","0","1","2","4"],
"Keltan":["12","5","10","0","2","0","3"],
"Knife":["10","5","0","0","0","1","4"],
"Taburi":["10","5","0","0","0","-","4"],
"Sword(Longknife)":["12","10","15","0","1","3","5"],
"Sword(Shortsword)":["12","10","5","0","2","4","4"],
"Mankar":["11","10","5","0","2","5","0"],
"Mang":["11","15","10","-5","3","6","0"],
"Sword(Broadsword)":["12","15","10","0","3","5","3"],
"Sword(StarSteel)":["14","17","10","0","3","5","4"],
"Sword(Estoc)":["11","15","10","0","3","0","6"],
"Sword(Falchion)":["12","15","5","0","4","6","1"],
"Sword(Bastard Sword)":["12","20","10","-10","4","7","4"],
"Sword(Battlesword)":["13","25","10","-20","5","8","4"],
"Club":["9","15","5","0","4","-","0"],
"Club(Mace)":["11","15","5","0","6","-","0"],
"Club(Morningstar)":["11","20","5","-10","0","-","5"],
"Club(Maul)":["9","20","5","-20","7","-","0"],
"Hatchet":["9","5","5","0","3","4","-"],
"Axe(Handaxe)":["11","10","5","0","4","6","-"],
"Axe(Warhammer)":["11","15","5","-5","6","-","-"],
"Axe(Battleaxe)":["12","20","10","-15","6","9","-"],
"Flail(Grainflail)":["9","20","5","0","5","-","-"],
"Flail(Ball & Chain)":["12","20","10","0","8","-","-"],
"Flail(Warflail)":["11","25","10","-20","9","-","-"],
"Spear(Staff)":["11","20","15","-10","4","-","-"],
"Spear(Javelin)":["10","15","5","-10","2","-","6"],
"Spear(Spear)":["11","20","10","-10","4","-","7"],
"Spear(Trident)":["12","20","15","-10","4","-","5"],
"Polearm(Lance)":["11","25","5","-15","4","-","8"],
"Polearm(Poleaxe)":["11","25","5","-15","6","9","6"],
"Polearm(Pike)":["12","25","5","-25","4","-","8"],
"q1":["11","25","5","-15","6","9","6"],
"Lightsabre":["18","35","25","0","-","30","30"],
"Bow(Crossbow)":["10","5","5","0","3","-","-"],
"Bow(Longbow)":["11","5","5","0","2","-","-"],
"Compound Bow":["13","5","5","0","1","-","-"],
"Bow(Shortbow)":["10","5","5","0","1","-","-"],
"Bow(Hartbow)":["13","5","5","0","1","-","-"],
"Unarmed(Kick)":["0","5","5","0","1","-","-"],
"Unarmed(Punch)":["0","0","15","0","0","-","-"],
"Bow(Minicrossbow)":["10","5","5","0","1","-","-"]
}



var missile_range = {"Bow(Shortbow)":[[5,6],[20,6],[40,5],[80,4],[160,3]],
"Bow(Longbow)":[[5,8],[25,8],[50,7],[100,6],[200,5]],
"Bow(Hartbow)":[[10,10],[30,9],[60,8],[120,7],[240,6]],
"Bow(Crossbow)":[[5,9],[20,8],[40,7],[80,6],[160,5]],
"Compound(Bow)":[[10,10],[30,10],[60,9],[120,8],[240,7]],
"Bow(Minicrossbow)":[[5,9],[20,8],[40,7],[80,6],[160,5]],
"Blowgun":[[2,0],[5,0],[10,0],[20,0],[40,0]],
"Sling":[[5,4],[15,4],[30,3],[60,2],[120,2]],
"StaffSling":[[5,5],[25,5],[50,4],[100,3],[200,3]],
"Taburi":[[2,4],[4,4],[8,3],[16,2],[32,2]],
"Shorkana":[[2,5],[3,5],[6,4],[12,3],[24,3]],
"Spear(Javelin)":[[3,7],[8,7],[16,6],[32,5],[64,4]],
"Spear(Spear)":[[3,8],[6,8],[12,7],[24,6],[48,5]],
"Spell(Ethereal Stone)":[[2,6],[5,6],[10,6],[20,6],[40,6]],
"Melee":[[1,1],[2,1],[4,1],[8,1],[16,1]]
}


var months = [
"Nuzyael",
"Peonu",
"Kelen",
"Nolus",
"Larane",
"Agrazhar",
"Azura",
"Halane",
"Savor",
"Ilvin",
"Navek",
"Morgat"
]

var occupational_skills = {
    "Alchemist": [
        "Alchemy/4",
        "Mathematics/3",
        "Herblore/3",
        "Mining/2",
        "Physician/2",
        "Script/5"
    ],
    "Animal Trainer": [
        "Animalcraft/4",
        "Hidework/2",
        "RIDING/2"
    ],
    "Apothecary": [
        "Herblore/4",
        "Alchemy/2",
        "Mathematics/2",
        "Physician/2",
        "Script/5"
    ],
    "Astrologer": [
        "Astrology/4",
        "Mathematics/3",
        "Drawing/3",
        "Tarotry/2",
        "Script/5"
    ],
    "Baliff": [
        "Law/3",
        "Agriculture/2",
        "INITIATIVE/6",
        "Foraging/4",
        "Survival/4",
        "Physician/2",
        "Heraldry/2",
        "Weaponcraft/2",
        "RIDING/6",
        "Polearm(Lance)/6",
        "Sword(Broadsword)/5",
        "Axe(Handaxe)/5",
        "Dagger/5",
        "Shield(Knight)/6",
        "Dancing/3"
    ],
    "Beggar": [
        "RHETORIC/5",
        "INTRIGUE/4",
        "Dagger/4"
    ],
    "Cartographer/Artist": [
        "Drawing/4",
        "Mathematics/2",
        "Script/5"
    ],
    "Chandler": [
        "Brewing/3",
        "Woodcraft/3",
        "Hidework/3",
        "Alchemy/2",
        "Metalcraft/2",
        "Script/5"
    ],
    "Charcoaler": [
        "Timbercraft/3",
        "Survival/3",
        "Woodcraft/2",
        "Metalcraft/2"
    ],
    "Chieftan": [
        "Tracking/4",
        "Bow/3",
        "Spear/4",
        "Dagger/4",
        "STEALTH/4",
        "Foraging/3",
        "Survival/3",
        "Hidework/2",
        "Fletching/2",
        "RHETORIC/4",
        "INTRIGUE/4"
    ],
    "Clothier": [
        "Textilecraft/4",
        "Hidework/3",
        "Jewelcraft/3",
        "Script/5"
    ],
    "Cook/Servant": [
        "INTRIGUE/4",
        "RHETORIC/4",
        "Cookery/4",
        "Textilecraft/3",
        "Herblore/2"
    ],
    "Courtesan": [
        "Lovecraft/5",
        "INTRIGUE/5",
        "SINGING/5",
        "Musician/3",
        "Dancing/3",
        "Script/5"
    ],
    "Embalmer": [
        "Embalming/4",
        "Woodcraft/2",
        "Alchemy/2",
        "Perfumery/2",
        "Script/5"
    ],
    "Farmer": [
        "Agriculture/4",
        "Weatherlore/4",
        "Animalcraft/3"
    ],
    "Fisherman": [
        "Fishing/5",
        "Seamanship/4",
        "Weatherlore/4",
        "Piloting/2",
        "Shipwright/2"
    ],
    "Gladiator": [
        "INITIATIVE/6",
        "Sword/5",
        "Shield/4",
        "Spear/5",
        "UNARMED/5",
        "Physician/2"
    ],
    "Glassworker": [
        "Glasswork/4",
        "Ceramics/2",
        "Alchemy/2",
        "Script/5"
    ],
    "Harper/Skald": [
        "SINGING/5",
        "Folklore/4",
        "ORATORY/4",
        "Lute/4",
        "Flute/3",
        "Harp/3",
        "Woodcraft/3",
        "Script/5"
    ],
    "Herald": [
        "Heraldry/4",
        "ORATORY/4",
        "RHETORIC/4",
        "INTRIGUE/5",
        "Drawing/4",
        "Language/5",
        "Script/5",
        "INITIATIVE/6",
        "Foraging/4",
        "Survival/4",
        "Physician/2",
        "Weaponcraft/2",
        "RIDING/6",
        "Polearm(Lance)/6",
        "Sword(Broadsword)/5",
        "Axe(Handaxe)/5",
        "Dagger/5",
        "Shield(Knight)/6",
        "Dancing/3"
    ],
    "Herdsman": [
        "Animalcraft/4",
        "Tracking/3",
        "Survival/3",
        "Weatherlore/4"
    ],
    "Hideworker": [
        "Hidework/4",
        "Textilecraft/2",
        "Alchemy/2"
    ],
    "Hunter/Trapper": [
        "Tracking/4",
        "Bow/3",
        "Dagger/4",
        "Bow/4",
        "STEALTH/4",
        "Foraging/3",
        "Survival/3",
        "Hidework/2",
        "Fletching/2"
    ],
    "Innkeeper": [
        "Brewing/4",
        "Cookery/4",
        "RHETORIC/4",
        "INTRIGUE/4",
        "Language/3",
        "Script/5"
    ],
    "Jeweler": [
        "Jewelcraft/4",
        "Metalcraft/3",
        "Mining/2",
        "Script/5"
    ],
    "Laborer/Longshoreman": [
        "INTRIGUE/4",
        "Seamanship/2"
    ],
    "Lady": [
        "INTRIGUE/5",
        "Folklore/4",
        "Textilecraft(Needlework)/3",
        "Dancing/3",
        "Heraldry/3",
        "Astrology/2",
        "Drawing/2"
    ],
    "Lexigrapher": [
        "Hidework(parchment&vellum)/4",
        "Alchemy(Inkcraft)/4",
        "Drawing/3",
        "Script/5",
        "Script/5"
    ],
    "Litigant": [
        "Law/4",
        "ORATORY/5",
        "RHETORIC/5",
        "INTRIGUE/5",
        "Language/3",
        "Script/5"
    ],
    "Locksmith": [
        "Lockcraft/4",
        "Metalcraft/3",
        "Woodcraft/2",
        "Script/5"
    ],
    "Mason": [
        "Masonry/4",
        "Woodcraft/3",
        "Engineering/3",
        "Mathematics/2",
        "Script/5"
    ],
    "Mercantyler": [
        "RHETORIC/5",
        "INTRIGUE/5",
        "Mathematics/3",
        "Law/2",
        "Dagger/2",
        "Language/3",
        "Script/5"
    ],
    "Metalsmith": [
        "Metalcraft/4",
        "Mining/2",
        "Weaponcraft/2"
    ],
    "Miller/Millwright": [
        "Milling/4",
        "Engineering/3",
        "Agriculture/3",
        "Script/5"
    ],
    "Miner": [
        "Mining/4",
        "Engineering/3",
        "Woodcraft/2",
        "Metalcraft/2",
        "Jewelcraft/1"
    ],
    "Ostler": [
        "Animalcraft(Horsecraft)/4",
        "RIDING/4",
        "Hidework/3"
    ],
    "Perfumer": [
        "Perfumery/4",
        "Alchemy/3",
        "Herblore/3",
        "Embalming/2",
        "Script/5"
    ],
    "Physician": [
        "Physician/4",
        "Herblore/3",
        "Alchemy/3",
        "Script/5"
    ],
    "Pilot": [
        "Piloting/4",
        "Weatherlore/4",
        "Seamanship/3",
        "Drawing/3",
        "Bow/3",
        "Shipwright/2",
        "Mathematics/2",
        "Script/5"
    ],
    "Potter": [
        "Ceramics/4",
        "Glasswork/2"
    ],
    "Prostitute/Pimp": [
        "Lovecraft/4",
        "INTRIGUE/4",
        "Dagger/4"
    ],
    "Ratter": [
        "Animalcraft(Rat)/5",
        "Animalcraft(Dog)/4",
        "Net/3",
        "Club/5",
        "Herblore/2"
    ],
    "Sage/Tutor": [
        "Folklore/4",
        "Mathematics/2",
        "Language/3",
        "Script/5",
        "Script/5"
    ],
    "Salter": [
        "Mining/3",
        "Cookery/4",
        "Survival/3",
        "Fishing/3",
        "Herblore/1"
    ],
    "Servant": [
        "INTRIGUE/4",
        "RHETORIC/4",
        "Textilecraft/3"
    ],
    "Scribe": [
        "Drawing/3",
        "Mathematics/2",
        "Language/3",
        "Script/5",
        "Script/5",
        "Script/5"
    ],
    "Seaman": [
        "Seamanship/4",
        "CLIMBING/5",
        "Club/5",
        "Dagger/4",
        "Fishing/3",
        "Weatherlore/3",
        "Piloting/2",
        "Shipwright/2"
    ],
    "Shaman": [
        "Ritual-Tribal/4",
        "Folklore/4",
        "INTRIGUE/4",
        "MentalConflict/4",
        "RHETORIC/4",
        "Weatherlore/4",
        "Dancing/3",
        "Foraging/3",
        "ORATORY/3",
        "Embalming/2",
        "Herblore/4",
        "Physician/3",
        "Survival/3",
        "Tracking/2",
        "Spear(Spear)/2"
    ],
    "Shipwright": [
        "Shipwright/4",
        "Woodcraft/3",
        "Timbercraft/3",
        "Metalcraft/2",
        "Mathematics/2",
        "Seamanship/2",
        "Script/5"
    ],
    "Teamster": [
        "RIDING/4",
        "Animalcraft/3",
        "Whip/3",
        "Woodcraft/2"
    ],
    "Tentmaker": [
        "Textilecraft/3",
        "Hidework/3",
        "Woodcraft/2"
    ],
    "Thatcher": [
        "CLIMBING/5",
        "Woodcraft/3",
        "Engineering/2"
    ],
    "Thespian": [
        "Acting/4",
        "ORATORY/4",
        "SINGING/4",
        "Musician/3",
        "Drawing/3"
    ],
    "Thief": [
        "Legerdemain/4",
        "AWARENESS/5",
        "STEALTH/4",
        "INTRIGUE/4",
        "Lockcraft/3",
        "Club/5",
        "Dagger/4",
        "Acrobatics/2"
    ],
    "Timberwright": [
        "Timbercraft/4",
        "Survival/3",
        "Weatherlore/4",
        "Woodcraft/3"
    ],
    "Toymaker": [
        "Woodcraft/4",
        "Lockcraft/3",
        "Drawing/3",
        "Hidework/2"
    ],
    "Weaponcrafter": [
        "Weaponcraft/4",
        "Sword/3",
        "Bow/3",
        "Metalcraft/3",
        "Fletching/3",
        "Mining/2"
    ],
    "Woodcrafter": [
        "Woodcraft/5",
        "Metalcraft/2",
        "Hidework/2"
    ],
    "Cleric/Agrik": [
        "Language(Azeryani)/3",
        "Script(Zerin)",
        "Ritual-Agrik/4",
        "RHETORIC/4",
        "INTRIGUE/4",
        "MentalConflict/4",
        "ORATORY/3",
        "Folklore/3",
        "Embalming/2",
        "Physician/2",
        "Law/2",
        "Drawing/2",
        "Script/5",
        "INITIATIVE/6",
        "UNARMED/4",
        "Axe(Sickle)/4",
        "Club(Mace)/4",
        "Shield/4",
        "Heraldry/3",
        "Language(Surikal)/3"
    ],
    "Cleric/Halea": [
        "Language(Karuia)/3",
        "Script(Zerin)",
        "Ritual-Halea/4",
        "RHETORIC/4",
        "INTRIGUE/4",
        "MentalConflict/4",
        "ORATORY/3",
        "Folklore/3",
        "Embalming/2",
        "Physician/2",
        "Law/2",
        "Drawing/2",
        "Heraldry/2",
        "Script/5",
        "Lovecraft/4",
        "Dancing/3",
        "Mathematics/2",
        "Musician/2",
        "Perfumery/2",
        "Language/4",
        "Script/5"
    ],
    "Cleric/Ilvir": [
        "Language(Old Jarinese)/3",
        "Script(Khruni)",
        "Ritual-Ilvir/4",
        "RHETORIC/4",
        "INTRIGUE/4",
        "MentalConflict/4",
        "ORATORY/3",
        "Folklore/3",
        "Embalming/2",
        "Law/2",
        "Drawing/2",
        "Heraldry/2",
        "Script/5",
        "Animalcraft(Ivashu)/4",
        "Drawing/3",
        "Physician/3",
        "Tarotry/2",
        "Herblore/2",
        "Language(Ivashi)/3"
    ],
    "Cleric/Larani": [
        "Language(Emela)/3",
        "Script(Khruni)",
        "Ritual-Larani/4",
        "RHETORIC/4",
        "INTRIGUE/4",
        "MentalConflict/4",
        "ORATORY/3",
        "Folklore/3",
        "Embalming/2",
        "Physician/2",
        "Law/2",
        "Drawing/2",
        "Script/5",
        "INITIATIVE/6",
        "UNARMED/4",
        "Dagger/4",
        "Sword/4",
        "Shield/4",
        "Heraldry/3"
    ],
    "Cleric/Morgath": [
        "Language(Azeri)/3",
        "Script(Nuvesarl)",
        "Ritual-Morgath/4",
        "RHETORIC/4",
        "INTRIGUE/4",
        "MentalConflict/4",
        "ORATORY/3",
        "Folklore/3",
        "Physician/2",
        "Law/2",
        "Drawing/2",
        "Heraldry/2",
        "Script/5",
        "Dagger/4",
        "Embalming/3",
        "Hidework(Human Skin)/2",
        "Woodcraft(Masks)/2",
        "Tarotry/2",
        "Language(Ormauk)/3"
    ],
    "Cleric/Naveh": [
        "Language(Besha)/3",
        "Script(Neramic)",
        "Ritual-Naveh/4",
        "RHETORIC/4",
        "INTRIGUE/4",
        "MentalConflict/4",
        "ORATORY/3",
        "Folklore/3",
        "Embalming/2",
        "Physician/2",
        "Law/2",
        "Drawing/2",
        "Heraldry/2",
        "Script/5",
        "INITIATIVE/6",
        "UNARMED/5",
        "STEALTH/5",
        "Dagger/4",
        "Acrobatics/3",
        "Legerdemain/2",
        "Lockcraft/2"
    ],
    "Cleric/Peoni": [
        "Language(Emela)/3",
        "Script(Khruni)",
        "Ritual-Peoni/4",
        "RHETORIC/4",
        "INTRIGUE/4",
        "MentalConflict/4",
        "ORATORY/3",
        "Folklore/3",
        "Embalming/2",
        "Law/2",
        "Drawing/2",
        "Heraldry/2",
        "Script/5",
        "Agriculture/4",
        "Animalcraft/3",
        "Herblore/3",
        "Physician/3",
        "Weatherlore/3",
        "Textilecraft/2"
    ],
    "Cleric/Sarajin": [
        "Language(Ivinian)/3",
        "Script(Runic)",
        "Ritual-Sarajin/4",
        "RHETORIC/4",
        "INTRIGUE/4",
        "MentalConflict/4",
        "ORATORY/3",
        "Folklore/3",
        "Embalming/2",
        "Physician/2",
        "Law/2",
        "Drawing/2",
        "Heraldry/2",
        "Script/5",
        "INITIATIVE/6",
        "UNARMED/4",
        "Axe/4",
        "Dagger/4",
        "Shield/4",
        "Runecraft/3",
        "Seamanship/2"
    ],
    "Cleric/Save-K'nor": [
        "Language(Azeri)/3",
        "Script(Tianta)",
        "Ritual-Save-K'nor/4",
        "RHETORIC/4",
        "INTRIGUE/4",
        "MentalConflict/4",
        "ORATORY/3",
        "Folklore/3",
        "Embalming/2",
        "Physician/2",
        "Law/2",
        "Drawing/2",
        "Heraldry/2",
        "Script/5",
        "Drawing/3",
        "Mathematics/3",
        "Law/3",
        "Heraldry/2",
        "Language/4",
        "Language/3",
        "Script/5"
    ],
    "Cleric/Siem": [
        "Language(Sindarin)/3",
        "Script(Selenian)",
        "Ritual-Siem/4",
        "RHETORIC/4",
        "INTRIGUE/4",
        "MentalConflict/4",
        "ORATORY/3",
        "Folklore/3",
        "Embalming/2",
        "Physician/2",
        "Law/2",
        "Drawing/2",
        "Heraldry/2",
        "Script/5",
        "Astrology/4",
        "Runecraft/3",
        "Foraging/3",
        "Survival/3",
        "Weatherlore/3",
        "Tarotry/2",
        "Musician/2",
        "Herblore/2"
    ],
    "Feudal Militia": [
        "INITIATIVE/5",
        "Foraging/4",
        "Survival/4",
        "Heraldry/2",
        "Physician/2",
        "Weaponcraft/2",
        "Spear/4",
        "Shield(Round)/4"
    ],
    "Feudal Yeoman, Foot": [
        "INITIATIVE/5",
        "Foraging/4",
        "Survival/4",
        "Heraldry/2",
        "Physician/2",
        "Weaponcraft/2",
        "Spear/5",
        "Sword(Shortsword)/4",
        "Dagger/4",
        "Shield(Round)/4"
    ],
    "Feudal Guardsman, Light": [
        "INITIATIVE/5",
        "Foraging/4",
        "Survival/4",
        "Heraldry/2",
        "Physician/2",
        "Weaponcraft/2",
        "Spear/6",
        "Sword(Shortsword)/5",
        "Dagger/5",
        "Shield(Round)/5"
    ],
    "Feudal Guardsman, Heavy": [
        "INITIATIVE/5",
        "Foraging/4",
        "Survival/4",
        "Heraldry/2",
        "Physician/2",
        "Weaponcraft/2",
        "Spear/6",
        "Sword(Falchion)/5",
        "Dagger/5",
        "Shield(Round)/5"
    ],
    "Feudal Yeoman, Shortbow": [
        "INITIATIVE/5",
        "Foraging/4",
        "Survival/4",
        "Heraldry/2",
        "Physician/2",
        "Weaponcraft/2",
        "Bow(Shortbow)/5",
        "Sword(Falchion)/5",
        "Dagger/5",
        "Shield(Buckler)/5"
    ],
    "Feudal Yeoman, Longbow": [
        "INITIATIVE/5",
        "Foraging/4",
        "Survival/4",
        "Heraldry/2",
        "Physician/2",
        "Weaponcraft/2",
        "Bow(Longbow)/5",
        "Sword(Falchion)/5",
        "Dagger/5",
        "Shield(Buckler)/5"
    ],
    "Feudal Knight, Medium": [
        "INITIATIVE/6",
        "Foraging/4",
        "Survival/4",
        "Heraldry/2",
        "Physician/2",
        "Weaponcraft/2",
        "RIDING/6",
        "Polearm(Lance)/6",
        "Sword(Broadsword)/5",
        "Axe(Handaxe)/5",
        "Dagger/5",
        "Shield(Knight)/6",
        "Dancing/3"
    ],
    "Feudal Knight, Heavy": [
        "INITIATIVE/6",
        "Foraging/4",
        "Survival/4",
        "Heraldry/2",
        "Physician/2",
        "Weaponcraft/2",
        "RIDING/6",
        "Polearm(Lance)/6",
        "Sword(Bastard Sword)/5",
        "Axe(Handaxe)/5",
        "Dagger/5",
        "Shield(Kite)/6",
        "Dancing/3"
    ],
    "Order Infantry, Light": [
        "INITIATIVE/5",
        "Foraging/4",
        "Survival/4",
        "Heraldry/2",
        "Physician/2",
        "Weaponcraft/2",
        "Spear/6",
        "Sword(Shortsword)/5",
        "Dagger/5",
        "Shield(Round)/5"
    ],
    "Order Infantry, Heavy": [
        "INITIATIVE/5",
        "Foraging/4",
        "Survival/4",
        "Heraldry/2",
        "Physician/2",
        "Weaponcraft/2",
        "Spear/6",
        "Sword(Falchion)/5",
        "Dagger/5",
        "Shield(Round)/5"
    ],
    "Order Archer": [
        "INITIATIVE/5",
        "Foraging/4",
        "Survival/4",
        "Heraldry/2",
        "Physician/2",
        "Weaponcraft/2",
        "Bow(Shortbow)/5",
        "Sword(Shortsword)/5",
        "Dagger/5",
        "Shield(Buckler)/5"
    ],
    "Order Knight, Medium": [
        "INITIATIVE/6",
        "Foraging/4",
        "Survival/4",
        "Heraldry/2",
        "Physician/2",
        "Weaponcraft/2",
        "RIDING/6",
        "Polearm(Lance)/6",
        "Sword(Broadsword)/5",
        "Club(Mace)/5",
        "Dagger/5",
        "Shield(Knight)/6",
        "Dancing/3"
    ],
    "Order Knight, Heavy": [
        "INITIATIVE/6",
        "Foraging/4",
        "Survival/4",
        "Heraldry/2",
        "Physician/2",
        "Weaponcraft/2",
        "RIDING/6",
        "Polearm(Lance)/6",
        "Sword(Bastard Sword)/5",
        "Club(Mace)/5",
        "Dagger/5",
        "Shield(Kite)/6",
        "Dancing/3"
    ],
    "Imperial Militia": [
        "INITIATIVE/5",
        "Foraging/4",
        "Survival/4",
        "Heraldry/2",
        "Physician/2",
        "Weaponcraft/2",
        "Spear/4",
        "Shield(Round)/4"
    ],
    "Imperial Legionnaire, Light": [
        "INITIATIVE/5",
        "Foraging/4",
        "Survival/4",
        "Heraldry/2",
        "Physician/2",
        "Weaponcraft/2",
        "Spear/5",
        "Sword(Shortsword)/4",
        "Dagger/4",
        "Shield(Tower)/5"
    ],
    "Imperial Legionnaire, Medium": [
        "INITIATIVE/5",
        "Foraging/4",
        "Survival/4",
        "Heraldry/2",
        "Physician/2",
        "Weaponcraft/2",
        "Spear/6",
        "Sword(Shortsword)/5",
        "Dagger/4",
        "Shield(Tower)/5"
    ],
    "Imperial Legionnaire, Shortbow": [
        "INITIATIVE/5",
        "Foraging/4",
        "Survival/4",
        "Heraldry/2",
        "Physician/2",
        "Weaponcraft/2",
        "Bow(Shortbow)/6",
        "Sword(Shortsword)/5",
        "Dagger/5",
        "Shield(Buckler)/5"
    ],
    "Patrician": [
        "INITIATIVE/6",
        "Foraging/4",
        "Survival/4",
        "Heraldry/2",
        "Physician/2",
        "Weaponcraft/2",
        "RIDING/6",
        "Polearm(Lance)/6",
        "Sword(Broadsword)/5",
        "Axe(Handaxe)/5",
        "Dagger/5",
        "Shield(Kite)/6",
        "Dancing/3"
    ],
    "Viking Clansman, Unarmored": [
        "INITIATIVE/5",
        "Foraging/4",
        "Survival/4",
        "Heraldry/2",
        "Physician/2",
        "Weaponcraft/2",
        "Spear/5",
        "Shield(Round)/5",
        "Dagger(Keltan)/4",
        "Seamanship/3"
    ],
    "Viking Clansman, Light": [
        "INITIATIVE/5",
        "Foraging/4",
        "Survival/4",
        "Heraldry/2",
        "Physician/2",
        "Weaponcraft/2",
        "Spear/6",
        "Shield(Round)/6",
        "Bow((Shortbow))/5",
        "Dagger(Keltan)/5",
        "Seamanship/3"
    ],
    "Viking Huscarl, Medium Foot": [
        "INITIATIVE/6",
        "Foraging/4",
        "Survival/4",
        "Heraldry/2",
        "Physician/2",
        "Weaponcraft/2",
        "Axe(Battleaxe)/6",
        "Sword(Broadsword)/5",
        "Dagger(Keltan)/5",
        "Shield(Round)/5",
        "Seamanship/3",
        "Piloting/2"
    ],
    "Viking Huscarl, Light Horse": [
        "INITIATIVE/6",
        "Foraging/4",
        "Survival/4",
        "Heraldry/2",
        "Physician/2",
        "Weaponcraft/2",
        "RIDING/6",
        "Polearm(Lance)/6",
        "Sword(Broadsword)/5",
        "Shield(Round)/5",
        "Seamanship/3",
        "Piloting/2"
    ],
    "Khuzdul Clansman": [
        "INITIATIVE/5",
        "Foraging/4",
        "Survival/4",
        "Heraldry/2",
        "Physician/2",
        "Weaponcraft/2",
        "Spear/6",
        "Axe(Handaxe)/5",
        "Shield(Round)/5"
    ],
    "Khuzdul Low Guard": [
        "INITIATIVE/5",
        "Foraging/4",
        "Survival/4",
        "Heraldry/2",
        "Physician/2",
        "Weaponcraft/2",
        "Spear/6",
        "Axe(Battleaxe)/5",
        "Dagger/5",
        "Shield(Round)/5"
    ],
    "Khuzdul High Guard": [
        "INITIATIVE/6",
        "Foraging/4",
        "Survival/4",
        "Heraldry/2",
        "Physician/2",
        "Weaponcraft/2",
        "Polearm(Poleaxe)/6",
        "Club(Mace)/5",
        "Dagger/5",
        "Shield(Round)/5"
    ],
    "Sindarin Ranger, Unarmored": [
        "INITIATIVE/5",
        "Foraging/4",
        "Survival/4",
        "Heraldry/2",
        "Physician/2",
        "Weaponcraft/2",
        "Bow(Hartbow)/6",
        "Sword(Longknife)/5",
        "Dagger/5",
        "Shield(Buckler)/5"
    ],
    "Sindarin Ranger, Light": [
        "INITIATIVE/5",
        "Foraging/4",
        "Survival/4",
        "Heraldry/2",
        "Physician/2",
        "Weaponcraft/2",
        "Bow(Hartbow)/6",
        "Sword(Longknife)/5",
        "Dagger/5",
        "Shield(Buckler)/5"
    ],
    "Sindarin Guardian": [
        "INITIATIVE/5",
        "Foraging/4",
        "Survival/4",
        "Heraldry/2",
        "Physician/2",
        "Weaponcraft/2",
        "Spear/7",
        "Sword(Longknife)/6",
        "Dagger/5",
        "Shield(Round)/6"
    ],
    "Sindarin Horsebow": [
        "INITIATIVE/5",
        "Foraging/4",
        "Survival/4",
        "Heraldry/2",
        "Physician/2",
        "Weaponcraft/2",
        "RIDING/6",
        "Bow(Hartbow)/6",
        "Polearm(Lance)/5",
        "Sword(Longknife)/5",
        "Shield(Knight)/6",
        "Dancing/3",
        "Musician/2"
    ],
    "Sindarin Knight": [
        "INITIATIVE/6",
        "Foraging/4",
        "Survival/4",
        "Heraldry/2",
        "Physician/2",
        "Weaponcraft/2",
        "RIDING/7",
        "Polearm(Lance)/7",
        "Sword(Longknife)/6",
        "Shield(Knight)/6",
        "Dancing/3",
        "Musician/2"
    ],
    "Shek-Pvar/Lyahvi*": [
        "Lyahvi/2",
        "Neutral/1",
        "Script/2",
        "Folklore/4",
        "Mathematics/2",
        "Legerdemain/3",
        "Glasswork/3",
        "Jewelcraft/3"
    ],
    "Shek-Pvar/Lyahvi**": [
        "Lyahvi/2",
        "Neutral/2",
        "Script/2",
        "Folklore/4",
        "Mathematics/2",
        "Legerdemain/3",
        "Glasswork/3",
        "Jewelcraft/3"
    ],
    "Shek-Pvar/Lyahvi***": [
        "Lyahvi/3",
        "Neutral/2",
        "Script/2",
        "Folklore/4",
        "Mathematics/2",
        "Legerdemain/3",
        "Glasswork/3",
        "Jewelcraft/3"
    ],
    "Shek-Pvar/Lyahvi****": [
        "Lyahvi/3",
        "Neutral/3",
        "Script/2",
        "Folklore/4",
        "Mathematics/2",
        "Legerdemain/3",
        "Glasswork/3",
        "Jewelcraft/3"
    ],
    "Shek-Pvar/Lyahvi*****": [
        "Lyahvi/4",
        "Neutral/3",
        "Script/2",
        "Folklore/4",
        "Mathematics/2",
        "Legerdemain/3",
        "Glasswork/3",
        "Jewelcraft/3"
    ],
    "Shek-Pvar/Peleahn*": [
        "Peleahn/2",
        "Neutral/1",
        "Script/2",
        "Folklore/4",
        "Mathematics/2",
        "Alchemy/3",
        "Cookery/4",
        "Metalcraft/1",
        "Weaponcraft/1"
    ],
    "Shek-Pvar/Peleahn**": [
        "Peleahn/2",
        "Neutral/2",
        "Script/2",
        "Folklore/4",
        "Mathematics/2",
        "Alchemy/3",
        "Cookery/4",
        "Metalcraft/1",
        "Weaponcraft/1"
    ],
    "Shek-Pvar/Peleahn***": [
        "Peleahn/3",
        "Neutral/2",
        "Script/2",
        "Folklore/4",
        "Mathematics/2",
        "Alchemy/3",
        "Cookery/4",
        "Metalcraft/1",
        "Weaponcraft/1"
    ],
    "Shek-Pvar/Peleahn****": [
        "Peleahn/3",
        "Neutral/3",
        "Script/2",
        "Folklore/4",
        "Mathematics/2",
        "Alchemy/3",
        "Cookery/4",
        "Metalcraft/1",
        "Weaponcraft/1"
    ],
    "Shek-Pvar/Peleahn*****": [
        "Peleahn/4",
        "Neutral/3",
        "Script/2",
        "Folklore/4",
        "Mathematics/2",
        "Alchemy/3",
        "Cookery/4",
        "Metalcraft/1",
        "Weaponcraft/1"
    ],
    "Shek-Pvar/Jmorvi*": [
        "Jmorvi/2",
        "Neutral/1",
        "Script/2",
        "Folklore/4",
        "Mathematics/2",
        "Metalcraft/3",
        "Lockcraft/3",
        "Mining(Mineralogy)/2",
        "Weaponcraft/2"
    ],
    "Shek-Pvar/Jmorvi**": [
        "Jmorvi/2",
        "Neutral/2",
        "Script/2",
        "Folklore/4",
        "Mathematics/2",
        "Metalcraft/3",
        "Lockcraft/3",
        "Mining(Mineralogy)/2",
        "Weaponcraft/2"
    ],
    "Shek-Pvar/Jmorvi***": [
        "Jmorvi/3",
        "Neutral/2",
        "Script/2",
        "Folklore/4",
        "Mathematics/2",
        "Metalcraft/3",
        "Lockcraft/3",
        "Mining(Mineralogy)/2",
        "Weaponcraft/2"
    ],
    "Shek-Pvar/Jmorvi****": [
        "Jmorvi/3",
        "Neutral/3",
        "Script/2",
        "Folklore/4",
        "Mathematics/2",
        "Metalcraft/3",
        "Lockcraft/3",
        "Mining(Mineralogy)/2",
        "Weaponcraft/2"
    ],
    "Shek-Pvar/Jmorvi*****": [
        "Jmorvi/4",
        "Neutral/3",
        "Script/2",
        "Folklore/4",
        "Mathematics/2",
        "Metalcraft/3",
        "Lockcraft/3",
        "Mining(Mineralogy)/2",
        "Weaponcraft/2"
    ],
    "Shek-Pvar/Fyvria*": [
        "Fyvria/2",
        "Neutral/1",
        "Script/2",
        "Folklore/4",
        "Mathematics/2",
        "Herblore/3",
        "Agriculture/3",
        "Animalcraft/3",
        "Embalming/2",
        "Foraging/3",
        "Physician/2",
        "Survival/3",
        "Tracking/2"
    ],
    "Shek-Pvar/Fyvria**": [
        "Fyvria/2",
        "Neutral/2",
        "Script/2",
        "Folklore/4",
        "Mathematics/2",
        "Herblore/3",
        "Agriculture/3",
        "Animalcraft/3",
        "Embalming/2",
        "Foraging/3",
        "Physician/2",
        "Survival/3",
        "Tracking/2"
    ],
    "Shek-Pvar/Fyvria***": [
        "Fyvria/3",
        "Neutral/2",
        "Script/2",
        "Folklore/4",
        "Mathematics/2",
        "Herblore/3",
        "Agriculture/3",
        "Animalcraft/3",
        "Embalming/2",
        "Foraging/3",
        "Physician/2",
        "Survival/3",
        "Tracking/2"
    ],
    "Shek-Pvar/Fyvria****": [
        "Fyvria/3",
        "Neutral/3",
        "Script/2",
        "Folklore/4",
        "Mathematics/2",
        "Herblore/3",
        "Agriculture/3",
        "Animalcraft/3",
        "Embalming/2",
        "Foraging/3",
        "Physician/2",
        "Survival/3",
        "Tracking/2"
    ],
    "Shek-Pvar/Fyvria*****": [
        "Fyvria/4",
        "Neutral/3",
        "Script/2",
        "Folklore/4",
        "Mathematics/2",
        "Herblore/3",
        "Agriculture/3",
        "Animalcraft/3",
        "Embalming/2",
        "Foraging/3",
        "Physician/2",
        "Survival/3",
        "Tracking/2"
    ],
    "Shek-Pvar/Odivshe*": [
        "Odivshe/2",
        "Neutral/1",
        "Script/2",
        "Folklore/4",
        "Mathematics/2",
        "Swimming/4",
        "Fishing/3",
        "Piloting/2",
        "Seamanship/2",
        "Brewing/2"
    ],
    "Shek-Pvar/Odivshe**": [
        "Odivshe/2",
        "Neutral/2",
        "Script/2",
        "Folklore/4",
        "Mathematics/2",
        "Swimming/4",
        "Fishing/3",
        "Piloting/2",
        "Seamanship/2",
        "Brewing/2"
    ],
    "Shek-Pvar/Odivshe***": [
        "Odivshe/3",
        "Neutral/2",
        "Script/2",
        "Folklore/4",
        "Mathematics/2",
        "Swimming/4",
        "Fishing/3",
        "Piloting/2",
        "Seamanship/2",
        "Brewing/2"
    ],
    "Shek-Pvar/Odivshe****": [
        "Odivshe/3",
        "Neutral/3",
        "Script/2",
        "Folklore/4",
        "Mathematics/2",
        "Swimming/4",
        "Fishing/3",
        "Piloting/2",
        "Seamanship/2",
        "Brewing/2"
    ],
    "Shek-Pvar/Odivshe*****": [
        "Odivshe/4",
        "Neutral/3",
        "Script/2",
        "Folklore/4",
        "Mathematics/2",
        "Swimming/4",
        "Fishing/3",
        "Piloting/2",
        "Seamanship/2",
        "Brewing/2"
    ],
    "Shek-Pvar/Savorya*": [
        "Savorya/2",
        "Neutral/1",
        "Script/2",
        "Folklore/4",
        "Mathematics/2",
        "MentalConflict/5",
        "Drawing/4",
        "Runecraft/3",
        "Tarotry/3"
    ],
    "Shek-Pvar/Savorya**": [
        "Savorya/2",
        "Neutral/2",
        "Script/2",
        "Folklore/4",
        "Mathematics/2",
        "MentalConflict/5",
        "Drawing/4",
        "Runecraft/3",
        "Tarotry/3"
    ],
    "Shek-Pvar/Savorya***": [
        "Savorya/3",
        "Neutral/2",
        "Script/2",
        "Folklore/4",
        "Mathematics/2",
        "MentalConflict/5",
        "Drawing/4",
        "Runecraft/3",
        "Tarotry/3"
    ],
    "Shek-Pvar/Savorya****": [
        "Savorya/3",
        "Neutral/3",
        "Script/2",
        "Folklore/4",
        "Mathematics/2",
        "MentalConflict/5",
        "Drawing/4",
        "Runecraft/3",
        "Tarotry/3"
    ],
    "Shek-Pvar/Savorya*****": [
        "Savorya/4",
        "Neutral/3",
        "Script/2",
        "Folklore/4",
        "Mathematics/2",
        "MentalConflict/5",
        "Drawing/4",
        "Runecraft/3",
        "Tarotry/3"
    ]
}

////////////////////////////////////////////////////////////


///////////////////////////////////







///////////////////////////////


var occupation_time = {
    "Alchemist": "7",
    "Animal Trainer": "3",
    "Apothecary": "6",
    "Astrologer": "4",
    "Baliff": "8",
    "Beggar": "1",
    "Cartographer/Artist": "5",
    "Chandler": "4",
    "Charcoaler": "3",
    "Chieftan": "15",
    "Clothier": "6",
    "Cook/Servant": "3",
    "Courtesan": "3",
    "Embalmer": "7",
    "Farmer": "4",
    "Fisherman": "5",
    "Gladiator": "4",
    "Glassworker": "7",
    "Harper/Skald": "7",
    "Herald": "12",
    "Herdsman": "2",
    "Hideworker": "5",
    "Hunter/Trapper": "5",
    "Innkeeper": "5",
    "Jeweler": "7",
    "Laborer/Longshoreman": "1",
    "Lady": "7",
    "Lexigrapher": "5",
    "Litigant": "7",
    "Locksmith": "6",
    "Mason": "7",
    "Mercantyler": "6",
    "Metalsmith": "6",
    "Miller/Millwright": "6",
    "Miner": "6",
    "Ostler": "5",
    "Perfumer": "6",
    "Physician": "7",
    "Pilot": "9",
    "Potter": "6",
    "Prostitute/Pimp": "1",
    "Ratter": "3",
    "Sage/Tutor": "5",
    "Salter": "4",
    "Servant": "1",
    "Scribe": "5",
    "Seaman": "5",
    "Shaman": "8",
    "Shipwright": "7",
    "Teamster": "2",
    "Tentmaker": "5",
    "Thatcher": "4",
    "Thespian": "7",
    "Thief": "3",
    "Timberwright": "6",
    "Toymaker": "5",
    "Weaponcrafter": "7",
    "Woodcrafter": "7",
    "Cleric/Agrik": "9",
    "Cleric/Halea": "9",
    "Cleric/Ilvir": "9",
    "Cleric/Larani": "9",
    "Cleric/Morgath": "9",
    "Cleric/Naveh": "9",
    "Cleric/Peoni": "9",
    "Cleric/Sarajin": "9",
    "Cleric/Save-K'nor": "9",
    "Cleric/Siem": "9",
    "Feudal Militia": "4",
    "Feudal Yeoman, Foot": "5",
    "Feudal Guardsman, Light": "5",
    "Feudal Guardsman, Heavy": "5",
    "Feudal Yeoman, Shortbow": "6",
    "Feudal Yeoman, Longbow": "6",
    "Feudal Knight, Medium": "7",
    "Feudal Knight, Heavy": "7",
    "Order Infantry, Light": "5",
    "Order Infantry, Heavy": "5",
    "Order Archer": "6",
    "Order Knight, Medium": "7",
    "Order Knight, Heavy": "7",
    "Imperial Militia": "5",
    "Imperial Legionnaire, Light": "5",
    "Imperial Legionnaire, Medium": "5",
    "Imperial Legionnaire, Shortbow": "6",
    "Patrician": "7",
    "Viking Clansman, Unarmored": "4",
    "Viking Clansman, Light": "5",
    "Viking Huscarl, Medium Foot": "6",
    "Viking Huscarl, Light Horse": "6",
    "Khuzdul Clansman": "15",
    "Khuzdul Low Guard": "20",
    "Khuzdul High Guard": "30",
    "Sindarin Ranger, Unarmored": "10",
    "Sindarin Ranger, Light": "11",
    "Sindarin Guardian": "12",
    "Sindarin Horsebow": "15",
    "Sindarin Knight": "20",
    "Shek-Pvar/Lyahvi*": "7",
    "Shek-Pvar/Lyahvi**": "7",
    "Shek-Pvar/Lyahvi***": "7",
    "Shek-Pvar/Lyahvi****": "7",
    "Shek-Pvar/Lyahvi*****": "7",
    "Shek-Pvar/Peleahn*": "7",
    "Shek-Pvar/Peleahn**": "7",
    "Shek-Pvar/Peleahn***": "7",
    "Shek-Pvar/Peleahn****": "7",
    "Shek-Pvar/Peleahn*****": "7",
    "Shek-Pvar/Jmorvi*": "7",
    "Shek-Pvar/Jmorvi**": "7",
    "Shek-Pvar/Jmorvi***": "7",
    "Shek-Pvar/Jmorvi****": "7",
    "Shek-Pvar/Jmorvi*****": "7",
    "Shek-Pvar/Fyvria*": "7",
    "Shek-Pvar/Fyvria**": "7",
    "Shek-Pvar/Fyvria***": "7",
    "Shek-Pvar/Fyvria****": "7",
    "Shek-Pvar/Fyvria*****": "7",
    "Shek-Pvar/Odivshe*": "7",
    "Shek-Pvar/Odivshe**": "7",
    "Shek-Pvar/Odivshe***": "7",
    "Shek-Pvar/Odivshe****": "7",
    "Shek-Pvar/Odivshe*****": "7",
    "Shek-Pvar/Savorya*": "7",
    "Shek-Pvar/Savorya**": "7",
    "Shek-Pvar/Savorya***": "7",
    "Shek-Pvar/Savorya****": "7",
    "Shek-Pvar/Savorya*****": "7"
}

log("loading javascript");

var started = false;

const getGMPlayers = (pageid) => findObjs({type:'player'})
    .filter((p)=>playerIsGM(p.id))
    .filter((p)=>undefined === pageid || p.get('lastpage') === pageid)
    .map(p=>p.id)
    ;

const sendGMPing = (left, top, pageid, playerid=null, moveAll=false) => {
    let players = getGMPlayers(pageid);
    if(players.length){
        sendPing(left,top,pageid,playerid,moveAll,players);
    }
};

function initRoll() {
	if (randomize_init_roll) {
		return randomInteger(6) + randomInteger(6) + randomInteger(6);
	} else {
		return 0; // canon
	}

}

function getMeleeEML(toke, ojn, charid, mod = 0, loc = "mid") {
	var out = {};
	out['Mastery Level'] = parseInt(myGet(ojn.slice(0, -4) + "ML", charid, 0));
	out['Attack Mod'] = parseInt(myGet(ojn.slice(0, -4) + "ATK", charid, 0));
	out['H Mod'] = parseInt(myGet(ojn.slice(0, -4) + "HM", charid, 0));
	if (toke.get('bar3_value')) {
		out['Universal Penalty'] = (parseInt(toke.get('bar3_value')) ) * -5;
	} else {
		out['Universal Penalty'] = (parseInt(myGet('UNIVERSAL_PENALTY', charid, 0)) ) * -5;
	}
	out['Encumbrance'] = parseInt(myGet('ENCUMBRANCE', charid, 0)) * -5;
	out['Location '+loc] = -1*hit_loc_penalty[loc]["penalty"];
	out['Situational Mod'] = parseInt(mod);
	var tot=0;
	_.each(_.keys(out), function(k) {
		tot += out[k];
	});
	out['Total'] = tot;
	 

	return out;
}



function computeAttackML(ojn, charid, app, mod) {

	return parseInt(myGet(ojn.slice(0, -4) + "ML", charid, 0))
		+ parseInt(myGet(ojn.slice(0, -4) + "ATK", charid, 0))
		+ parseInt(myGet(ojn.slice(0, -4) + "HM", charid, 0))
		+ parseInt(mod) - (app);
}

function getSelectedPage(msg) {
	if (msg.selected) {
		var obj = getObj("graphic", msg.selected[0]['_id']);
		return obj.get("_pageid")
	} else {
		return getPlayerPage(msg.playerid)
	}
}

function getPlayerPage(player_id) {
	var psp = Campaign().get("playerspecificpages");
	if (psp) {
		if (player_id in psp) {
			return psp[player_id];
		} else {
			return Campaign().get("playerpageid");
		}
	} else {
		return Campaign().get("playerpageid");
	}
}


function determineSuccess(atkml) {
	if (aroll <= atkml) {
		if (aroll % 5 == 0) {
			return { asuc:"CS", ais:3 };
		} else {
			return { asuc:"MS", ais:2 };
		}
	} else {
		if (aroll % 5 !== 0) {
			return { asuc:"MF", ais:1 };
		} else {
			return { asuc:"CF", ais:0 };
		}
	}
}


function findWeapon(charid, weaponname) {
	return filterObjs(function (obj) {
		obn = obj.get('name');
		if (obn) {
			if ((obn.indexOf("WEAPON_NAME")) !== -1
				&& (obj.get("_characterid") == charid)
				&& (obj.get("current") == weaponname)) {
				return true;
			} else {
				return false;
			}
		} else {
			return false;
		}
	});
}

function missileAttack(dist, app, appstr, atkmov, charid) {
	var missi = getrange(wepname, dist[0]);
	app = app + missi[0];
	if (missi[0] < 0) {
		appstr += " +" + missi[0] * -1 + "[Rng]";
	} else {
		appstr += " -" + missi[0] + "[Rng]";;
	}
	if (atkmov < 5) {
		app = app - Math.round(parseInt(myGet('ENCUMBRANCE', charid, 0)) * 2.5);
		appstr += " +" + Math.round(parseInt(myGet('ENCUMBRANCE', charid, 0)) * 2.5) + "[NM]";
	}
	if (atkmov > 5) {
		app = app + 10;
		appstr += " -10[Mov]";
	}
	if (myGet('IS_MOUNTED', charid, 0) == 'on') {
		app = app + 10;
		appstr += " -10[Mnt]";
	}
	return { missi, app, appstr };
}


function charLog(character_id, text, rtime=false, gtime=false) {
	var logout = myGet("TEXTAREA_LOG",character_id,"");
	if (rtime) { 
		var d = new Date();
		var n = d.toLocaleString();
		logout += n + ":  ";
	}
	if (gtime) { logout += getHarnTimeStr(state.MainGameNS.GameTime) + ": ";}
	mySet("TEXTAREA_LOG",character_id, logout + text + "\n")

}

function handle_pickskill(args, msg) {
	sendChat("Skill Improvement Roll",  msg.content.slice(msg.content.indexOf(args[1])+21) + "<br>[Pick Skill](!improveskill " + args[1] 
		+ " %{" + msg.content.slice(msg.content.indexOf(args[1])+21) + "|helper-SkillList})")
}


function handle_improveskill(args, msg) {
	char = getObj("character", args[1]);
	skill_att_name = findSkill(char, args[2]);
	var d = new Date();
	var n = d.toLocaleString();
	var ml = parseInt(myGet(skill_att_name.slice(0,-4)+"ML",char.id,0));

	roll = randomInteger(100) + parseInt(myGet(skill_att_name.slice(0,-4)+"SB",char.id,0));
	if (roll >= ml) {
		mySet(skill_att_name.slice(0,-4)+"ML",char.id,(ml+1));
		sendChat("Skill Improvement " + myGet("NAME",char.id,""), "<br>" 
			+ "<br>" + " roll " +roll +": SUCCESS<br>" + args[2] + " ML increases to " + (ml+1));
		charLog(char.id, ": Skill Improvement Roll: " + args[2] + " " 
			+ roll +": SUCCESS: ML = " + (ml+1),realtime,gametime);
	} else {
		sendChat("Skill Improvement " + myGet("NAME",char.id,""), "<br>" + args[2]
			+ "<br>" + " roll " +roll +": FAIL<br> "+ args[2] + " ML stays at " + ml);
		charLog(char.id, ": Skill Improvement Roll: " + args[2] + " " 
			+ roll +": FAIL: ML = " + ml,realtime,gametime);
	}
}


function rollshock(charid, token, unipenalty) {
	var shockstr = "";
	var shockroll = 0;
	for (i = 0; i < unipenalty; i++) {
		var ir = randomInteger(6);
		shockroll = shockroll + ir
		if (i > 0) {
			shockstr = shockstr + " + " + ir;

		} else {
			shockstr = shockstr + "[[" + ir;

		}
	}
	end = myGet("COMBAT_ENDURANCE", charid,0);
	if (shockroll > end) {
		token.set("status_sleepy");
		return "<br/>Shock Roll: " + shockstr + "]]<br/><h4>FAIL</h4><br/>";
	} else {
		return "<br/>Shock Roll: " + shockstr + "]]<br/>Pass<br/>";
	}

}

function handle_rollatts(args, msg) {
	var char = getObj("character", args[1]);
	var rolls = [ "STR", "STA", "DEX", "AGL", "INT", "AUR", "WIL", "EYE",
			"HRG", "SML", "VOI", "CML", "FRAME" ]
	_.each(rolls, function(attname) {
		var r = randomInteger(6) + randomInteger(6) + randomInteger(6);
		if (msg.content.indexOf("?") !== -1) {
			myGet(attname, char.id, r);
		} else {
			mySet(attname, char.id, r);
		}
	});
	var autoskills = [ "CLIMBING_SB", "CONDITION_SB", "DODGE_SB", "JUMPING_SB",
			"STEALTH_SB", "THROWING_SB", "AWARENESS_SB", "INTRIGUE_SB",
			"ORATORY_SB", "RHETORIC_SB", "SINGING_SB", "INITIATIVE_SB",
			"UNARMED_SB" ]
	_.each(autoskills, function(skillname) {
		myGet(skillname, char.id, 1);

	});
}
function gethiteff(loc, effImp) {
	var lr = "None";
	if (effImp > 0) {
		var col = 4;
	}
	if (effImp > 4) {
		var col = 5;
	}
	if (effImp > 8) {
		var col = 6;
	}
	if (effImp > 12) {
		var col = 7;
	}
	if (effImp > 16) {
		var col = 8;
	}
	_.each(hit_location_table, function(row) {
		if (row[3] == loc) {
			lr = row[col];
		}

	});

	return lr;
}

function gethitloc(roll, aim) {
	var lr;
	_.each(hit_location_table, function(row) {
		if (row[aim] !== "-") {
			if (parseInt(row[aim].slice(0, 2)) <= roll) {
				lr = row[3];
				if (trace) {log(`location table ${row[aim]} hits ${row[3]}`)}
			}
		}

	});

	return lr;
}



function getCharByNameAtt(charname) {
	var attr = findObjs({
        		current: charname,
				name: "NAME",
        		_type: "attribute",
        	})[0];
	return getObj("character",attr.get('_characterid'));
}
/**
 * Update the skill bonues of the active sheet.
 * @param {Message} msg the message representing the command, with arguments separated by spaces
 */
function handle_calcsb(args, msg) {
	if (trace) {log(`handle_calcsb(${args},${msg.content})`)}
	var char = getObj("character", args[1]);
	if (char) {
		calcSB(char, msg);
	}
}

/**
 * Allow the hand of god to tip the scales.
 * @param {Message} msg the message representing the command, with arguments separated by spaces
 */
function handle_cheat(args, msg) {
	if (trace) {log(`handle_cheat(${args},${msg.content})`)}
	if (playerIsGM(msg.playerid)) {
		state.MainGameNS["cheat"] = parseInt(msg.content.slice(6));
		log("cheat: " + msg.content.slice(6));
	}
}

/**
 * I do not know
 * @param {Message} msg the message representing the command, with arguments separated by spaces
 */
function handle_mapsend(args, msg) {
	if (trace) {log(`handle_mapsend(${args},${msg.content})`)}
	args = msg.content.substr(9).split(",");
	//TODO defensive programming
	var player = findObjs({
		type: 'player',
		_displayname: args[0]
	})[0];

	//TODO defensive programming
	var page = findObjs({
		type: 'page',
		name: args[1]
	})[0];

	var playerspecificpages = new Object();
	var pl = new Object();
	if (Campaign().get("playerspecificpages")) {
		playerspecificpages = Campaign().get("playerspecificpages");
		Campaign().set("playerspecificpages", false);
	}

	pl[player.id] = page.id;
	playerspecificpages = Object.assign(playerspecificpages, pl);
	log(playerspecificpages);
	Campaign().set("playerspecificpages", playerspecificpages);
}

/**
 * This command is obsolete now that we initialize item lists on startup.
 * @param {Message} msg the message representing the command, with arguments separated by spaces
 */
function handle_itemlist(args, msg) {
	if (trace) {log(`handle_itemlist(${args},${msg.content})`)}
	initializeTables(msg.playerid);
}

/**
 * Populates the character skills with occupation appropriate skills (and starting ML?)
 * @param {Message} msg the message representing the command, with arguments separated by spaces
 */
function handle_occupation(args, msg) {
	if (trace) {log(`handle_occupation(${args},${msg.content})`)}
	var char = getObj("character", args[1]);
	if (char) {
		log(msg.content.slice(33));
		var occ = myGet('OCCUPATION', char.id, "Farmer");
		if (occ in occupational_skills) {
			_.each(occupational_skills[occ], function (skl) {
				sk = skl.split("/");
				skn = findSkill(char, sk[0]).slice(0, -4);
				log(skn);
				mySet(skn + "ML", char.id, sk[1]);

			});
		}
	}
}
function handle_gmrand(args, msg) {
	if (trace) {log(`handle_gmrand(${args},${msg.content})`)}
	if (!msg.selected) {return;}
	//log(msg.selected);
	var objid = msg.selected[randomInteger(msg.selected.length) - 1];
	//log(objid['_id']);
	var obj = getObj("graphic", objid['_id']);
	sendGMPing(obj.get('left'), obj.get('top'), obj.get('pageid'), "", true);
	sendChat("Random Character", "/w gm " + obj.get('name'));
}

function handle_rand(args, msg) {
	if (trace) {log(`handle_rand(${args},${msg.content})`)}
	if (!msg.selected) {return;}
	//log(msg.selected);
	var objid = msg.selected[randomInteger(msg.selected.length) - 1];
	//log(objid['_id']);
	var obj = getObj("graphic", objid['_id']);
	sendPing(obj.get('left'), obj.get('top'), obj.get('pageid'), "", true);
	sendChat("Random Character", obj.get('name'));
	return { objid, obj };
}

function handle_addtime(args, msg) {
	if (trace) {log(`handle_addtime(${args},${msg.content})`)}
	state.MainGameNS.GameTime += parseInt(args[1]);
	sendChat("Timekeeper", getHarnTimeStr(state.MainGameNS.GameTime));
	//log(getHarnTimeStr(state.MainGameNS.GameTime));
}

function handle_settime(args, msg) {
	if (trace) {log(`handle_settime(${args},${msg.content})`)}
	setHarnTime(args);
	log(getHarnTimeStr(state.MainGameNS.GameTime));
}

function handle_time(args, msg) {
	if (trace) {log(`handle_time(${args},${msg.content})`)}
	log(getHarnTimeStr(state.MainGameNS.GameTime));
	sendChat("Timekeeper", getHarnTimeStr(state.MainGameNS.GameTime));
}

function handle_loc(args, msg) {
	if (trace) {log(`handle_loc(${args},${msg.content})`)}
	gethitloc(args[1], args[2]);
}

function handle_attack_melee_table(args, msg) {
	if (trace) {log(`handle_attack_melee_table(${args},${msg.content})`)}
	sendChat(msg.who, "Melee Attack Result<br/>" + attack_melee[args[1]][args[2]][args[3]] + "<br/>");
}

function handle_out(args, msg) {
	if (trace) {log(`handle_out(${args},${msg.content})`)}
	var g = getObj(msg.selected[0]['_type'], msg.selected[0]['_id']);
	out(g.get("represents"));
}

/**
 * handle the tokemove command (no clue)
 * @param {Message} msg the message representing the command, with arguments separated by spaces
 */
function handle_tokemove(args, msg) {
	if (trace) {log(`handle_tokemove(${args},${msg.content})`)}
	if (args.length == 2) {
		var obj = getObj("graphic", args[1]);
		sendChat(msg.who, "Move = " + tokemove(obj));
	} else {
		log("Please select character");
	}
}

/**
 * handle the clearmove command (no clue)
 * @param {Message} msg the message representing the command, with arguments separated by spaces
 */
function handle_clearmove(args, msg) {
	if (trace) {log(`handle_clearmove(${args},${msg.content})`)}
	if (args.length == 2) {
		var obj = getObj("graphic", args[1]);
		obj.set('lastmove', obj.get('left') + ',' + obj.get('top'));
	} else {
		log("Please select character");
	}
}

/**
 * Adds item to inventory.
 * @param {Message} msg the message representing the command, with arguments separated by spaces
 */
function handle_addItem(args, msg) {
	if (trace) {log(`handle_addItem(${args},${msg.content})`)}
	if (args.length > 2) {
		log(msg.content.slice(30));
		addItem(args[1], msg.content.slice(30));
	} else {
		log("Please select character");
	}
}

/**
 * Calculate armor values (protection at locations).
 * @param {Message} msg the message representing the command, with arguments separated by spaces
 */
function handle_ca(args, msg) {
	if (trace) {log(`handle_ca(${args},${msg.content})`)}
	if (args.length > 1) {
		calcArmor(args[1]);
	}
	else if (msg.selected) {
		var g = getObj(msg.selected[0]['_type'], msg.selected[0]['_id']);

		if (g.get("represents")) {
			calcArmor(g.get("represents"));
		}
	} else {
		log("Please select character");
	}
}

/**
 * Import a character generated with HârnMaster Character Utility from https://www.lythia.com/game_aides/harnchar/
 * @param {Message} msg the message representing the command, with arguments separated by spaces
 */
function handle_xin(args, msg) {
	if (trace) {log(`handle_xin(${args},${msg.content})`)}
	if (args.length > 1) {
		log(args[1]);
		xin(args[1]);
	} else if (msg.selected) {
		var g = getObj(msg.selected[0]['_type'], msg.selected[0]['_id']);

		if (g.get("represents")) {
			xin(g.get("represents"));
		}

	} else {
		log("Please select character");
	}
}

/**
 * This command appears obsolete.
 * @param {Message} msg the message representing the command, with arguments separated by spaces
 */
function handle_move(args, msg) {
	if (trace) {log(`handle_move(${args},${msg.content})`)}
	if (msg.selected) {
		var g = getObj(msg.selected[0]['_type'], msg.selected[0]['_id']);
		//log(tokemove(g))
	} else {
		log("Please select token");
	}
}

/**
 * ?
 * @param {Message} msg the message representing the command, with arguments separated by spaces
 */
function handle_invin(args, msg) {
	if (trace) {log(`handle_invin(${args},${msg.content})`)}
	if (args.length > 1) {
		//log(args[1]);
		invin(args[1]);
	} else if (msg.selected) {
		var g = getObj(msg.selected[0]['_type'], msg.selected[0]['_id']);
		if (g.get("represents")) {
			invin(g.get("represents"));
		}
	} else {
		log("Please select character");
	}
}

/**
 * The command used for attacking without a selected token
 * @param {Message} msg the message representing the command, with arguments separated by spaces
 */
function handle_sheetattack(args, msg) {
	if (trace) {log(`handle_sheetattack(${args},${msg.content})`)}
	handle_attack(args, msg);
}

/**
 * Calculate distance between two tokens?.
 * @param {Message} msg the message representing the command, with arguments separated by spaces
 */
function handle_tokendis(args, msg) {
	if (trace) {log(`handle_tokendis(${args},${msg.content})`)}
	dis = tokendistance(getObj("graphic", args[1]), getObj("graphic", args[2]));
	sendChat("Token Distance", dis[0] + " " + dis[1] + "<br/>");
}

function initializeTables(playerid) {
	if (trace) {log(`>initializeTables(${playerid})`)}
	var gms = findObjs({type:'player'}).filter((p)=>playerIsGM(p.id));
	var gmId;
	if (gms.length>0) {
		gmId = gms[0].id;
	} else {
		log("error - no gm found")
		if (playerId != 0) {
			gmId = playerid
		} else {
			return;
		}
	}
	if (generate_item_list) {
		
	
		var out = "";
		var outarmor = "";
		var outweap = "";
		Object.keys(prices).sort().forEach(function (k) {
			if (k in weapons_table) {
				outweap += "|" + k;
			} else if (k.substr(0, k.lastIndexOf(",")) in armor_coverage) {
				outarmor += "|" + k;
			} else {
				out += "|" + k;
			}
		});
		//log(out+"\n\n");
		out = out.replace(/,/g, "&#44;");
		out = "?{Item" + out + "}";
		var mac = findObjs({
			type: 'macro',
			playerid: gmId,
			name: 'helper-ItemList'
		})[0];
		if (mac) {
			mac.set('action', out);
		} else {
			createObj('macro', {
				name: 'helper-ItemList',
				visibleto: "all",
				action: out,
				playerid: gmId
			});
		}
		outweap = outweap.replace(/,/g, "&#44;");
		outweap = "?{Item" + outweap + "}";
		var mac = findObjs({
			type: 'macro',
			playerid: gmId,
			name: 'helper-WeaponList'
		})[0];
		if (mac) {
			log("registering #WeaponList");
			mac.set('action', outweap);
		} else {
			log("creating #WeaponList");
			createObj('macro', {
				name: 'helper-WeaponList',
				visibleto: "all",
				action: outweap,
				playerid: gmId
			});
		}
		outarmor = outarmor.replace(/,/g, "&#44;");
		outarmor = "?{Item" + outarmor + "}";
		var mac = findObjs({
			type: 'macro',
			playerid: gmId,
			name: 'helper-ArmorList'
		})[0];
		if (mac) {
			mac.set('action', outarmor);
		} else {
			createObj('macro', {
				name: 'helper-ArmorList',
				visibleto: "all",
				action: outarmor,
				playerid: gmId
			});
		}
	} else { if (trace) {log(`no item list`)}}
	_.each(_.keys(default_macros), function(obj) {
		if (trace) {log("macro: " +obj)}
	
		var out = default_macros[obj];
		var mac = findObjs({
			type: 'macro',
			playerid: gmId,
			name: obj
		})[0];
		if (mac) {
			mac.set('action', out);
		} else {
			createObj('macro', {
				name: obj,
				visibleto: "all",
				action: out,
				playerid: gmId
			});
		}
	});

	var chars = findObjs({ _type: "character",});
	
	chars.forEach( function(c) {
		_.each(_.keys(default_abilities), function(obj) {
			var mac = findObjs({
			type: 'ability',
			_characterid: c.id,
			name: obj
			})[0];
			if (!mac) {
				var out = default_abilities[obj];
				createObj('ability', {
					name: obj,
					action: out,
					_characterid: c.id
				});
			}
		});
	});
	
	if (trace) {log("<initializeTables()")}
	return;
}

function getWep(charid) {
    return filterObjs(function(obj) {
		obn = obj.get('name');
		if (obn) {
			if (obn.includes("WEAPON_NAME")
					&& (obj.get("_characterid") == charid)) {
				return true;
			} else {
				return false;
			}
		} else {
			return false;
		}
	});
}

function setWeaponsList(charid) {

	var out2 = "";
	getWep(charid).forEach( function(w) {
	    out2 += "|" + myGet(w.get('name'),charid,"");
	})
	out2 = out2.replace(/,/g, "&#44;");
	out2 = "?{Weapon" + out2 + "}";
	var mac = findObjs({
		type: 'ability',
		_characterid: charid,
		name: 'helper-Weapons'
	})[0];

	if (mac) {
		mac.set('action', out2);
	} else {
		createObj('ability', {
			name: 'helper-Weapons',
			action: out2,
			_characterid: charid
		});
	}
	
	

}

function setSkillList(charid) {
	var out = "";
	var sl = skillList(charid);

	for (i = 0; i < sl.length; i++) {
		out += "|" + sl[i];
	}

	//log(out+"\n\n");
	out = out.replace(/,/g, "&#44;").replace(/\)/g,'&#41;');
	out = "?{Skills" + out + "}";
	var mac = findObjs({
		type: 'ability',
		_characterid: charid,
		name: 'helper-SkillList'
	})[0];
	if (mac) {
		mac.set('action', out);
	} else {
		createObj('ability', {
			name: 'helper-SkillList',
			action: out,
			_characterid: charid
		});
	}
}


function addinjury(loc, injstr, charid) {
	if((injstr.indexOf("Fum") == 0) || (injstr.indexOf("Stu") == 0)) {
		var sev = injstr.slice(3,4);
		var lvl = parseInt(injstr.slice(4,5));
	} else {
		var sev = injstr.slice(0,1);
		var lvl = parseInt(injstr.slice(1,2))
	}
	var mid = makeid();

	mySet("repeating_injury_"+ mid +"_INJURY_LOCATION",charid,loc);
	mySet("repeating_injury_"+ mid +"_INJURY_SEVERITY",charid,sev);
	mySet("repeating_injury_"+ mid +"_INJURY_LEVEL",charid,lvl);
	mySet("repeating_injury_"+ mid +"_INJURY_HEALINGROLL",charid,"");
	mySet("repeating_injury_"+ mid +"_INJURY_INFECTED",charid,0);
	mySet("repeating_injury_"+ mid +"_INJURY_INFECTED_FEEDBACK",charid,0);

	return;
}



function getrange(weapname, dist){
	if (!(weapname in missile_range)) { weapname = "Melee";}
	for (var i = 4; i >= 0; i--) {
		if((missile_range[weapname][i][0]*5)>dist) {
			if(i==0) {
				var penalty = missle_close_range_mod;
			} else {
				var penalty = (i-1)*20;
			}
			var impact = missile_range[weapname][i][1];
		}
	}
	return [penalty,impact]
}



function handle_newturn(args, msg) {
	turnorder = [];

	var currentPageGraphics = findObjs({
		_pageid: getSelectedPage(msg),
		_type: "graphic",
	});

	_.each(currentPageGraphics, function(obj) {

		if(obj.get('represents').startsWith('-M') && (obj.get('layer') == 'objects')  && !obj.get('status_skull')) {

        	if (msg.selected) {
        	    for(i=0;i<msg.selected.length;i++) {
        	        if (obj.id == msg.selected[i]["_id"]) {
        	            turnPush(obj);
        	        }
        	    }
        	} else {
        	    turnPush(obj);
        	}
		}
	});
	Campaign().set("turnorder", JSON.stringify(turnorder.sort((a, b) => (a.pr < b.pr) ? 1 : -1)));

	state.MainGameNS.GameTime += 10;
	sendChat("New Round", getHarnTimeStr(state.MainGameNS.GameTime));
}

function turnPush(obj) {
	if (obj.get('bar3_value')) {
		var pp = (parseInt(obj.get('bar3_value')) + parseInt(myGet('ENCUMBRANCE',obj.get("represents"),0)))*5;
	} else {
		var pp = (parseInt(myGet('UNIVERSAL_PENALTY',obj.get("represents"),0)) + parseInt(myGet('ENCUMBRANCE',obj.get("represents"),0)))*5;
	}
	obj.set('lastmove',obj.get('left')+','+obj.get('top'))

	if (obj.get('status_sleepy')) {
	    var initml = 0;
	} else {
	    if (myGet("IS_MOUNTED",  obj.get("represents"),0) == "on") {
	        var initml = Math.round(((parseInt(myGet("RIDING_ML",  obj.get("represents"),0)) + parseInt(myGet("STEED_INIT",  obj.get("represents"),0)))/2) - pp  + initRoll());
	    } else {
	        var initml = parseInt(myGet("INITIATIVE_ML",  obj.get("represents"),0)) - pp  + initRoll();
	    }
	}

	turnorder.push({
		id: obj.id,
		pr: initml,
		custom: ""
	});
}

function addWeapon(charid,weapon_name) {
	if (trace) {log("addWeapon("+charid+", "+weapon_name+")")}
	if (weapon_name in weapons_table) {

		var mid = makeid();
		mySet("repeating_weapon_"+ mid +"_WEAPON_NAME",charid,weapon_name);
		if(weapon_name in prices) {mySet("repeating_weapon_"+ mid +"_WEAPON_WGT",charid,prices[weapon_name]["weight"]);} else {
			mySet("repeating_weapon_"+ mid +"_WEAPON_WGT",charid,0);
		}
		mySet("repeating_weapon_"+ mid +"_WEAPON_WQ",charid,weapons_table[weapon_name][0]);
		mySet("repeating_weapon_"+ mid +"_WEAPON_ATK",charid,weapons_table[weapon_name][1]);
		mySet("repeating_weapon_"+ mid +"_WEAPON_DEF",charid,weapons_table[weapon_name][2]);
		mySet("repeating_weapon_"+ mid +"_WEAPON_HM",charid,weapons_table[weapon_name][3]);
		mySet("repeating_weapon_"+ mid +"_WEAPON_B",charid,weapons_table[weapon_name][4]);
		mySet("repeating_weapon_"+ mid +"_WEAPON_E",charid,weapons_table[weapon_name][5]);
		mySet("repeating_weapon_"+ mid +"_WEAPON_P",charid,weapons_table[weapon_name][6]);

		if (weapon_name.indexOf("Unarmed") == 0) {
		    mySet("repeating_weapon_"+ mid +"_WEAPON_ML",charid,myGet("UNARMED_ML",charid,0));
		} else {
    		var wepskill  = filterObjs(function(obj) {
    			obn = obj.get('name');
    			if(obn) {
    				if((obn.indexOf("COMBATSKILL_NAME")) !== -1 && (obj.get("_characterid") == charid) && (weapon_name.indexOf(obj.get("current")) !== -1)) {return true;
    				} else {return false;}
    			} else {return false;}
    		});

    		if (wepskill[0]) {
    			mySet("repeating_weapon_"+ mid +"_WEAPON_ML",charid,myGet(wepskill[0].get('name').slice(0,-4)+"ML",charid,0));
    		}
		}
		mySet("repeating_weapon_"+ mid +"_WEAPON_AML",charid,0);
		mySet("repeating_weapon_"+ mid +"_WEAPON_DML",charid,0);
		mySet("repeating_weapon_"+ mid +"_WEAPON_NOTE",charid," ");
	}
	var mid = makeid();
	mySet("repeating_inventoryitems_"+ mid +"_INVENTORY_NAME",charid,weapon_name);
	mySet("repeating_inventoryitems_"+ mid +"_INVENTORY_TYPE",charid,"Weapon");
	mySet("repeating_inventoryitems_"+ mid +"_INVENTORY_LOCATION",charid,"");
	mySet("repeating_inventoryitems_"+ mid +"_INVENTORY_Q",charid,"0");
	mySet("repeating_inventoryitems_"+ mid +"_INVENTORY_QUANTITY",charid,"1");
	mySet("repeating_inventoryitems_"+ mid +"_INVENTORY_WORN",charid,"on");


	if(weapon_name in prices) {
	    mySet("repeating_inventoryitems_"+ mid +"_INVENTORY_WGT",charid,prices[weapon_name]["weight"]);
	    mySet("repeating_inventoryitems_"+ mid +"_INVENTORY_PRICE",charid,prices[weapon_name]["price"]);
	} else {
		mySet("repeating_inventoryitems_"+ mid +"_INVENTORY_WGT",charid,0);
		mySet("repeating_inventoryitems_"+ mid +"_INVENTORY_PRICE",charid,0)
	}

}

function addItem(charid, item) {
	if (trace) {log("addItem("+charid+", "+item+")")}
    if (item in weapons_table) {
        addWeapon(charid, item);
    } else {
    	var mid = makeid();
    	mySet("repeating_inventoryitems_"+ mid +"_INVENTORY_NAME",charid,item);
    	if (item.substr(0,item.lastIndexOf(",")) in armor_coverage) {
    	    mySet("repeating_inventoryitems_"+ mid +"_INVENTORY_TYPE",charid,"Armor");
    	} else {
    	    mySet("repeating_inventoryitems_"+ mid +"_INVENTORY_TYPE",charid,"Item");
    	}

    	mySet("repeating_inventoryitems_"+ mid +"_INVENTORY_NOTES",charid,"");
    	mySet("repeating_inventoryitems_"+ mid +"_INVENTORY_Q",charid,"0");
    	mySet("repeating_inventoryitems_"+ mid +"_INVENTORY_QUANTITY",charid,"1");
    	mySet("repeating_inventoryitems_"+ mid +"_INVENTORY_WORN",charid,"on");
    	log(item)


    	if(item in prices) {
    	    mySet("repeating_inventoryitems_"+ mid +"_INVENTORY_WGT",charid,prices[item]["weight"]);
    	    mySet("repeating_inventoryitems_"+ mid +"_INVENTORY_PRICE",charid,prices[item]["price"]);
    	} else {
    		mySet("repeating_inventoryitems_"+ mid +"_INVENTORY_WGT",charid,0);
    		mySet("repeating_inventoryitems_"+ mid +"_INVENTORY_PRICE",charid,0)
    	}
    }
}

function addArmor(charid, item) {
	if (trace) {log("addIArmor("+charid+", "+item+")")}
	var mid = makeid();
	mySet("repeating_inventoryitems_"+ mid +"_INVENTORY_NAME",charid,item);
	mySet("repeating_inventoryitems_"+ mid +"_INVENTORY_TYPE",charid,"Armor");
	mySet("repeating_inventoryitems_"+ mid +"_INVENTORY_NOTES",charid,"");
	mySet("repeating_inventoryitems_"+ mid +"_INVENTORY_Q",charid,"0");
	mySet("repeating_inventoryitems_"+ mid +"_INVENTORY_QUANTITY",charid,"1");
	mySet("repeating_inventoryitems_"+ mid +"_INVENTORY_WORN",charid,"on");


	if(item in prices) {
	    mySet("repeating_inventoryitems_"+ mid +"_INVENTORY_WGT",charid,prices[item]["weight"]);
	    mySet("repeating_inventoryitems_"+ mid +"_INVENTORY_PRICE",charid,prices[item]["price"]);
	} else {
		mySet("repeating_inventoryitems_"+ mid +"_INVENTORY_WGT",charid,0);
		mySet("repeating_inventoryitems_"+ mid +"_INVENTORY_PRICE",charid,0)
	}
}

function calcArmor(charid) {

	var atts  = filterObjs(function(obj) {
		obn = obj.get('name');
		if(obn) {
			if((obn.indexOf("INVENTORY_NAME")) !== -1 && (obj.get("_characterid") == charid)) {return true;
			} else {return false;}
		} else {return false;}
	});



	var newa = coverage2loc
	_.each(newa,  function(ob1) {
		ob1["COV"]="";
		ob1["AQ"]=0;
		ob1["B"]=0;
		ob1["E"]=0;
		ob1["P"]=0;
		ob1["F"]=0;



		});
	_.each(atts,  function(ob1) {


		var ojn = ob1.get('name');
		if(myGet(ojn.slice(0, -4) + "TYPE", charid, 0) == "Armor") {
    		if(myGet(ojn.slice(0, -4) + "WORN", charid, 0) == "on") {
        		ojv = ob1.get('current');
        		if(ojv.slice(ojv.lastIndexOf(",")+2) in armor_prot) {

        			var art = armor_prot[ojv.slice(ojv.lastIndexOf(",")+2)];

        			if(ojv.slice(0,ojv.lastIndexOf(",")) in armor_coverage) {
            			var arl = armor_coverage[ojv.slice(0,ojv.lastIndexOf(","))]["coverage"];
            			for (var i = 0; i < arl.length; i++) {
            				newa[arl[i]]["COV"] += " "+art[0];
            				aq = parseInt(myGet(ojn.slice(0,-4)+"Q",charid,0))
            				newa[arl[i]]["AQ"] += aq;
            				newa[arl[i]]["B"] += parseInt(art[1])+aq;
            				newa[arl[i]]["E"] += parseInt(art[2])+aq;
            				newa[arl[i]]["P"] += parseInt(art[3])+aq;
            				newa[arl[i]]["F"] += parseInt(art[4])+aq;
            			}
        			}
        		}
    		}
		}
	});

	_.each(newa,  function(ob1) {
		mySet(ob1["LOC"]+"_LAYERS",charid,ob1["COV"]);
		mySet(ob1["LOC"]+"_AQ",charid,ob1["AQ"]);
		mySet(ob1["LOC"]+"_B",charid,ob1["B"]);
		mySet(ob1["LOC"]+"_E",charid,ob1["E"]);
		mySet(ob1["LOC"]+"_P",charid,ob1["P"]);
		mySet(ob1["LOC"]+"_F",charid,ob1["F"]);

	});



}
function opad(num) {
	return ("0" + num).slice(-2);
}
function getHarnTimeStr(timef) {
	var year =  Math.floor(timef/ 31104000);
	var month = Math.floor((timef- (year * 31104000))/2592000)+1;
	var mday = Math.floor((timef- (year *31104000) - ((month-1) * 2592000))/86400)+1;
	var day = Math.floor((timef- (year * 31104000))/86400);
	var hour = Math.floor((timef- (year *31104000) - (day * 86400))/3600);
	var minute = Math.floor((timef- (year *31104000) - (day * 86400) - (hour *3600))/60);
	var sec = Math.floor(timef - (year *31104000) - (day * 86400) - (hour *3600) - (minute *60));
	return (year+720).toString() + '-' + month.toString() + '('+ months[(month-1)] +')-' + mday.toString() +' ' + opad(hour.toString()) + ':' + opad(minute.toString()) +':' + opad(sec.toString() ) ;

}
function setHarnTime(args) {
	var seconds = (parseFloat(args[1]) -720) * 31104000;
	if (args[2]) {
		seconds = seconds + (parseFloat(args[2])-1) * 2592000;
	}
	if (args[3]) {
		seconds = seconds + (parseFloat(args[3])-1) * 86400;

	}
	if (args[4]) {
		seconds = seconds + parseFloat(args[4]) * 3600;

	}
	if (args[5]) {
		seconds = seconds + parseFloat(args[5]) * 60;

	}
	if (args[6]) {
		seconds = seconds + parseFloat(args[6]);

	}
	state.MainGameNS.GameTime = seconds;
	log(seconds);
}

function makeid() {
	var text = "-";
	var possible = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789";

	for (var i = 0; i < 19; i++)
		text += possible.charAt(Math.floor(Math.random() * possible.length));

	return text;
}


function myGet(attname, tid, deft) {
	var attribute = findObjs({
		type: 'attribute',
		characterid: tid,
		name: attname
	})[0]
	if (!attribute) {
		attribute = createObj('attribute', {
			characterid: tid,
			name:attname,
			current: deft,
			max: ''
		});
	}

	return attribute.get('current');

}

function mySet(attname, tid, deft) {
	var attribute = findObjs({
		type: 'attribute',
		characterid: tid,
		name: attname
	})[0]
	if (!attribute) {
		attribute = createObj('attribute', {
			characterid: tid,
			name:attname,
			current: deft,
			max: ''
		});
	}
	attribute.set('current', deft);
}

function myGetmax(attname, tid, deft) {
	var attribute = findObjs({
		type: 'attribute',
		characterid: tid,
		name: attname
	})[0]
	if (!attribute) {
		attribute = createObj('attribute', {
			characterid: tid,
			name:attname,
			current: '',
			max: deft
		});
	}
	return attribute.get('max');
}

function mySetmax(attname, tid, deft) {
	var attribute = findObjs({
		type: 'attribute',
		characterid: tid,
		name: attname
	})[0]
	if (!attribute) {
		attribute = createObj('attribute', {
			characterid: tid,
			name:attname,
			current: '',
			max: deft
		});
	}
	attribute.set('max', deft);
}

function getIndex() {
	state.MainGameNS.index++
	return state.MainGameNS.index;
}
function tokemove(toke) {
	var curPage = getObj("page", toke.get("_pageid"));
	var curScale = curPage.get("scale_number"); // scale for 1 unit, eg. 1 unit = 5ft
    var lastmove = toke.get("lastmove");
    var moves = lastmove.split(",");

    var dis=0;
    for(i=2;i<moves.length-1;i=i+2) {
        dis = dis + pixel2dis(parseFloat(moves[i-2]),parseFloat(moves[i-1]),parseFloat(moves[i]),parseFloat(moves[i+1]));
    }

    dis = dis + pixel2dis(parseFloat(moves[moves.length-2]),parseFloat(moves[moves.length-1]),parseFloat(toke.get("left")),parseFloat(toke.get("top")));
    dis =dis * curScale;
    dis = Math.round(dis * 10) / 10;
    return dis;
}
function pixel2dis(left1,top1,left2,top2) {
	var lDist = Math.abs(left1-left2)/70;
	var tDist = Math.abs(top1-top2)/70;
	var dist = 0;
	dist = Math.sqrt(lDist * lDist + tDist * tDist);
	return dist;
}
function tokendistance(token1,token2) {

	var curPage = getObj("page", token1.get("_pageid"));
	var curScale = curPage.get("scale_number"); // scale for 1 unit, eg. 1 unit = 5ft
	var curUnit = curPage.get("scale_units"); // ft, m, km, mi etc.
	var gridSize = 70;
	var lDist = Math.abs(token1.get("left")-token2.get("left"))/gridSize;
	var tDist = Math.abs(token1.get("top")-token2.get("top"))/gridSize;
	var dist = Math.sqrt(lDist * lDist + tDist * tDist);
	var distSQ = dist;

	dist = dist * curScale;
	dist = Math.round(dist * 10) / 10;
	return [dist, curUnit];
}


function skillList(charid) {

	var slist = [];

	slist.push.apply(slist,autoskillsnames);

	var atts = findObjs({
		_characterid: charid,
		_type: "attribute",
	});

	_.each(atts,  function(ob1) {

		ojn = ob1.get('name')
		ojv = ob1.get('current')

		if ((ojv) && (ojn.indexOf("SKILL_NAME") !== -1)) {
			_.each(_.keys(skilllist), function(obj) {
				if (ojv.indexOf(obj) !== -1)  {
					slist.push(ojv);
				}
			});
		}
	});
	return slist;
}




function findSkill(char,skillname) {

    var nameout = "False"
    if (skillname.toUpperCase() in autoskills) {
        nameout = skillname.toUpperCase() + "_NAME"
    } else {
        var atts = findObjs({
          _characterid: char.id,
          _type: "attribute",
        });

        _.each(atts,  function(ob1) {


            ojn = ob1.get('name')
            ojv = ob1.get('current')

            if (ojn.indexOf("SKILL_NAME") !== -1) {
                _.each(_.keys(skilllist), function(obj) {
                    if ((ojv.indexOf(obj) !== -1) && (skillname.indexOf(obj) !== -1)) {
                        nameout = ojn;
                    }
                });
            }
        });
    }
    if (nameout == "False") {

        _.each(_.keys(skilllist), function(obj) {
            if (skillname.indexOf(obj) !== -1) {
                var mid = makeid();

                if (skilllist[obj]["type"] == "PHYSICAL") {
                    mySet("repeating_physicalskill_"+ mid +"_PHYSICALSKILL_NAME",char.id,obj);
                    mySet("repeating_physicalskill_"+ mid +"_PHYSICALSKILL_SB",char.id,0);
                    mySet("repeating_physicalskill_"+ mid +"_PHYSICALSKILL_ML",char.id,0);
                    nameout = "repeating_physicalskill_"+ mid +"_PHYSICALSKILL_NAME";
                } else if (skilllist[obj]["type"] == "LORE") {
                    mySet("repeating_loreskill_"+ mid +"_LORESKILL_NAME",char.id,obj);
                    mySet("repeating_loreskill_"+ mid +"_LORESKILL_SB",char.id,0);
                    mySet("repeating_loreskill_"+ mid +"_LORESKILL_ML",char.id,0);
                    nameout = "repeating_loreskill_"+ mid +"_LORESKILL_NAME";
                } else if (skilllist[obj]["type"] == "MAGIC") {
                    mySet("repeating_magicskill_"+ mid +"_MAGICSKILL_NAME",char.id,obj);
                    mySet("repeating_magicskill_"+ mid +"_MAGICSKILL_SB",char.id,0);
                    mySet("repeating_magicskill_"+ mid +"_MAGICSKILL_ML",char.id,0);
                    nameout = "repeating_magicskill_"+ mid +"_MAGICSKILL_NAME";
                } else if (skilllist[obj]["type"] == "COMBAT") {
                    mySet("repeating_combatskill_"+ mid +"_COMBATSKILL_NAME",char.id,obj);
                    mySet("repeating_combatskill_"+ mid +"_COMBATSKILL_SB",char.id,0);
                    mySet("repeating_combatskill_"+ mid +"_COMBATSKILL_ML",char.id,0);
                    nameout = "repeating_combatskill_"+ mid +"_COMBATSKILL_NAME";
                } else if (skilllist[obj]["type"] == "COMMUNICATION") {
                    mySet("repeating_communicationskill_"+ mid +"_COMMUNICATIONSKILL_NAME",char.id,obj);
                    mySet("repeating_communicationskill_"+ mid +"_COMMUNICATIONSKILL_SB",char.id,0);
                    mySet("repeating_communicationskill_"+ mid +"_COMMUNICATIONSKILL_ML",char.id,0);
                    nameout = "repeating_communicationskill_"+ mid +"_COMMUNICATIONSKILL_NAME";
                } else if (skilllist[obj]["type"] == "RITUAL") {
                    mySet("repeating_ritualskill_"+ mid +"_RITUALSKILL_NAME",char.id,obj);
                    mySet("repeating_ritualskill_"+ mid +"_RITUALSKILL_SB",char.id,0);
                    mySet("repeating_ritualskill_"+ mid +"_RITUALSKILL_ML",char.id,0);
                    nameout = "repeating_ritualskill_"+ mid +"_RITUALSKILL_NAME";
                }
            }
        });

    }

    return nameout;
}


function calcSB(char,msg) {


    var rolls = ["STR","STA","DEX","AGL","INT","AUR","WIL","EYE","HRG","SML","VOI","CML","FRAME"]
    _.each(rolls, function(attname) {
        var r = randomInteger(6) + randomInteger(6) + randomInteger(6);
        myGet(attname,char.id,r);
    });

    _.each(_.keys(autoskills), function(skillname) {

        myGet(skillname+"_SB",char.id,1);
    });



    var atts = findObjs({
      _characterid: char.id,
      _type: "attribute",
    });
    var sss = myGet('SUNSIGN', char.id,"Ulandus").split('-');

    _.each(atts,  function(ob1) {


        ojn = ob1.get('name')
        ojv = ob1.get('current')

        if (ojn.indexOf("SKILL_NAME") !== -1){

            _.each(_.keys(skilllist), function(obj) {
                if (ojv.indexOf(obj) !== -1) {
                    var sb = Math.round(((Number(myGet(skilllist[obj]["sba"][0], char.id))+Number(myGet(skilllist[obj]["sba"][1], char.id))+Number(myGet(skilllist[obj]["sba"][2], char.id)))/3));
                    var sb1 = 0;
                    var sb2 = 0;
                    if (sss.length == 2) {

                        if (sss[0].slice(0,3) in skilllist[obj]["ssm"]) {
                        sb1 = Number(skilllist[obj]["ssm"][sss[0].slice(0,3)])
                        }
                        if (sss[1].slice(0,3) in skilllist[obj]["ssm"]) {
                        sb2 = Number(skilllist[obj]["ssm"][sss[1].slice(0,3)])
                        }
                        if (sb1>sb2) {
                            sb += sb1;
                        } else {
                            sb += sb2;
                        }

                    } else {
                        if (sss[0].slice(0,3) in skilllist[obj]["ssm"]) {
                        sb = sb + Number(skilllist[obj]["ssm"][sss[0].slice(0,3)])
                        }
                    }

                    log(obj + " - " + Math.round(sb))
                    if ( msg.content.indexOf("?") !== -1) {
                        myGet(ojn.slice(0,-4)+"SB",char.id, sb);
                    }
                    else  {
                        mySet(ojn.slice(0,-4)+"SB",char.id, sb);
                    }
                    var ml = parseInt(myGet(ojn.slice(0,-4)+"ML",char.id,0));

                    if((!ml) || (ml == 0)) {
                        if(skilllist[obj]["oml"]) {
                            mySet(ojn.slice(0,-4)+"ML",char.id,(sb*parseInt(skilllist[obj]["oml"])))
                        }
                    } else if ((parseInt(ml) > 0) && (parseInt(ml) < sb)){
                        if(skilllist[obj]["oml"]) {
                            mySet(ojn.slice(0,-4)+"ML",char.id,(sb*parseInt(ml)))
                        }
                    }
                }
            });
        }
        if (ojn.indexOf("_SB") !== -1){

            _.each(_.keys(skilllist), function(obj) {
                if (ojn.indexOf(obj) !== -1) {
                    var sb = Math.round(((Number(myGet(skilllist[obj]["sba"][0], char.id))+Number(myGet(skilllist[obj]["sba"][1], char.id))+Number(myGet(skilllist[obj]["sba"][2], char.id)))/3));
                    var sb1 = 0;
                    var sb2 = 0;

                    if (sss.length == 2) {
                        if (sss[0].slice(0,3) in skilllist[obj]["ssm"]) {
                        sb1 = Number(skilllist[obj]["ssm"][sss[0].slice(0,3)])
                        }
                        if (sss[1].slice(0,3) in skilllist[obj]["ssm"]) {
                        sb2 = Number(skilllist[obj]["ssm"][sss[1].slice(0,3)])
                        }
                        if(sb1>sb2) {
                            sb += sb1
                        } else {
                            sb += sb2
                        }
                    } else {
                        if (sss[0].slice(0,3) in skilllist[obj]["ssm"]) {
                        sb = sb + Number(skilllist[obj]["ssm"][sss[0].slice(0,3)])
                        }
                    }
                    if ( msg.content.indexOf("?") !== -1) {
                        myGet(ojn,char.id, sb);
                    }
                    else  {
                        mySet(ojn,char.id, sb);
                    }
                    var ml = parseInt(myGet(ojn.slice(0,-2)+"ML",char.id,0));

                    if((!ml) || (ml == 0)) {
                        if(skilllist[obj]["oml"]) {
                            mySet(ojn.slice(0,-2)+"ML",char.id,(sb*parseInt(skilllist[obj]["oml"])))
                        }
                    } else if ((parseInt(ml) > 0) && (parseInt(ml) < sb)){
                        if(skilllist[obj]["oml"]) {
                            mySet(ojn.slice(0,-2)+"ML",char.id,(sb*parseInt(ml)))
                        }
                    }

                }

            });

        }

    });
    sendChat("API", "/w gm done calc SB");
}


function out(charid) {


    var char = getObj("character", charid);
    var atts = findObjs({
      _characterid: charid,
      _type: "attribute",

    });
    log("=================================")
    _.each(atts,  function(ob1) {
        ojn = ob1.get('name')
        ojv = ob1.get('current')
        log(ojn+ " - "+ojv)


    });
}
function invin(charid) {
    var char = getObj("character", charid);
    var atts = findObjs({
      _characterid: charid,
      _type: "attribute",
      name: "TEXTAREA_NOTE"
    });

    if(atts[0]) {
        log("=================================")
        ojv = atts[0].get('current');
        log(atts[0]);
        if (ojv.length > 100) {
            ojv = ojv.replace(/\t/g,"")
            for (i = 0; i < 10; i++) {
                ojv = ojv.replace(/  /g," ")
            }

            ojv = ojv.replace(/\n /g,"\n");
            ojv = ojv.replace(/\nOffspring:/g,"");
            ojv = ojv.replace(/\nOrphan:/g,"");
            lns = ojv.split("\n");



            var tv = lns[1].split(" ");
            var xi = 0;

            if(lns[xi].slice(0,15) == "Clothing/Armor:"){
                lns[xi] = lns[xi].slice(16);
                while((lns[xi].slice(0,8) !== "Weapons:") && (lns[xi].slice(0,6) !== "Notes:")) {
                    if(lns[xi].length >2) {addArmor(charid, lns[xi]);}
                    xi++;


                }

            }

            if(lns[xi].slice(0,8) == "Weapons:"){
                lns[xi] = lns[xi].slice(9);
                while((lns[xi].slice(0,10) !== "Equipment:") && (lns[xi].slice(0,6) !== "Notes:")) {
                    if(lns[xi].length >2) {addWeapon(charid,lns[xi]);}
                    xi++;
                }


            }

            if(lns[xi].slice(0,10) == "Equipment:"){
                lns[xi] = lns[xi].slice(11);
                while(lns[xi].slice(0,6) !== "Notes:") {
                    if(lns[xi].length >2) {addItem(charid, lns[xi]);}
                    xi++;
                }
            }
        }
    }
}
function xin(charid) {
    var char = getObj("character", charid);
    var atts = findObjs({
      _characterid: charid,
      _type: "attribute",
      name: "TEXTAREA_NOTE"
    });

    if(atts[0]) {
        log("=================================")
        ojv = atts[0].get('current');
        //log(atts[0]);
        if (ojv.length > 100) {
        ojv = ojv.replace(/\t/g,"")
        for (i = 0; i < 10; i++) {
            ojv = ojv.replace(/  /g," ")
        }

        ojv = ojv.replace(/\n /g,"\n");
        ojv = ojv.replace(/\nOffspring:/g,"");
        ojv = ojv.replace(/\nOrphan:/g,"");
        lns = ojv.split("\n");



        var tv = lns[1].split(" ");
        if(tv[0]!=="Strength"){
            log("no");
        } else {
            mySet("NAME",charid,lns[0]);
            mySet("STR",charid,parseInt(tv[1]));
            mySet("AGL",charid,parseInt(tv[3]));
            mySet("SML",charid,parseInt(tv[5]));
            mySet("WIL",charid,parseInt(tv[7]));
            mySet("CML",charid,parseInt(tv[9]));
            var tv = lns[2].split(" ");
            mySet("STA",charid,parseInt(tv[1]));
            mySet("EYE",charid,parseInt(tv[3]));
            mySet("VOI",charid,parseInt(tv[5]));
            mySet("AUR",charid,parseInt(tv[7]));
            mySet("END",charid,parseInt(tv[9]));
            var tv = lns[3].split(" ");
            mySet("DEX",charid,parseInt(tv[1]));
            mySet("HRG",charid,parseInt(tv[3]));
            mySet("INT",charid,parseInt(tv[5]));
            mySet("MORAL",charid,parseInt(tv[7]));
            mySet("SPECIES",charid,lns[4].slice(9));

            mySet("GENDER",charid,lns[5].slice(5));
            mySet("BIRTHDATE",charid,(lns[7].slice(12)+" "+lns[8].slice(11)+", "+lns[9].slice(12)));
            mySet("SUNSIGN",charid,lns[10].slice(10,-1));
            mySet("AGE",charid,lns[6].slice(5));
            mySet("PIETY",charid,lns[28].slice(7));
            mySet("HEIGHT",charid,lns[18].slice(8));
            mySet("FRAME",charid,lns[19].slice(7));
            mySet("WEIGHT",charid,lns[20].slice(8));
            mySet("COMPLEXION",charid,lns[23].slice(12));
            mySet("HAIR_COLORS",charid,lns[24].slice(12));
            mySet("EYE_COLOR",charid,lns[25].slice(11));
            mySet("CULTURE",charid,lns[11].slice(9));
            mySet("SOCIAL_CLASS",charid,lns[12].slice(13));
            mySet("SIBLING_RANK",charid,lns[13].slice(13));
            mySet("PARENT",charid,lns[15].slice(11));
            mySet("ESTRANGEMENT",charid,lns[16].slice(13));
            mySet("CLANHEAD",charid,lns[17].slice(10));





            var xi = 26;
            while(lns[xi].indexOf("Physical Skills:")==-1) {
                if(lns[xi].indexOf("Occupation:")!==-1){
                    char.set("name",lns[xi].slice(12)+getIndex())
                    mySet("OCCUPATION",charid,lns[xi].slice(12));
                }
                if(lns[xi].indexOf("Medical:")!==-1){
                    mySet("PHYSICAL",charid,lns[xi].slice(9));
                }
                if(lns[xi].indexOf("Psyche:")!==-1){
                    mySet("MENTAL",charid,lns[xi].slice(8));
                }
                if(lns[xi].indexOf("Diety:")!==-1){
                    mySet("DIETY",charid,lns[xi].slice(7));
                    var diety = lns[xi].slice(7);
                }
                if(lns[xi].indexOf("Piety:")!==-1){
                    mySet("PIETY",charid,lns[xi].slice(7));
                }

                xi++;
            }
            xi++;

            while(lns[xi] !== "Communications Skills:") {
                tv = lns[xi].replace(/ /g,"").split("/");
                if(tv.length > 1) {
                    if (tv[0] in autoskills) {
                        tv2 = tv[1].split("(SB:");
                        tv3 = tv2[1].split(")OML:");
                        mySet(tv[0]+"_SB",charid,tv3[0])
                        mySet(tv[0]+"_ML",charid,tv2[0])


                    } else {
                        var tv2 = tv[1].split("(SB:");
                        var tv3 = tv2[1].split(")OML:");
                        var mid = makeid();
                        mySet("repeating_physicalskill_"+ mid +"_PHYSICALSKILL_NAME",charid,tv[0]);
                        mySet("repeating_physicalskill_"+ mid +"_PHYSICALSKILL_SB",charid,tv3[0]);
                        mySet("repeating_physicalskill_"+ mid +"_PHYSICALSKILL_ML",charid,tv2[0]);
                    }
                }
                xi++
            }


            xi++;
            while(lns[xi] !== "Combat Skills:") {
                var stv = lns[xi].replace(/ /g,"")
                var tv = stv.split("/");
                if(tv.length > 1) {
                    if (tv[0] in autoskills) {
                        var tv2 = tv[1].split("(SB:");
                        var tv3 = tv2[1].split(")OML:");
                        mySet(tv[0]+"_SB",charid,tv3[0])
                        mySet(tv[0]+"_ML",charid,tv2[0])

                    } else {
                        var tv2 = tv[1].split("(SB:");
                        var tv3 = tv2[1].split(")OML:");
                        var mid = makeid();
                        mySet("repeating_communicationskill_"+ mid +"_COMMUNICATIONSKILL_NAME",charid,tv[0]);
                        mySet("repeating_communicationskill_"+ mid +"_COMMUNICATIONSKILL_SB",charid,tv3[0]);
                        mySet("repeating_communicationskill_"+ mid +"_COMMUNICATIONSKILL_ML",charid,tv2[0]);
                    }
                }
                xi++
            }

            xi++;
            while(lns[xi] !== "Crafts & Lore Skills:") {
                tv = lns[xi].replace(/ /g,"").split("/");
                if(tv.length > 1) {
                    if (tv[0] in autoskills) {
                        tv2 = tv[1].split("(SB:");
                        tv3 = tv2[1].split(")OML:");
                        mySet(tv[0]+"_SB",charid,tv3[0])
                        mySet(tv[0]+"_ML",charid,tv2[0])


                    } else {
                        var tv2 = tv[1].split("(SB:");
                        var tv3 = tv2[1].split(")OML:");
                        var mid = makeid();
                        mySet("repeating_combatskill_"+ mid +"_COMBATSKILL_NAME",charid,tv[0]);
                        mySet("repeating_combatskill_"+ mid +"_COMBATSKILL_SB",charid,tv3[0]);
                        mySet("repeating_combatskill_"+ mid +"_COMBATSKILL_ML",charid,tv2[0]);
                    }
                }
                xi++
            }


            xi++;


            while(lns[xi] !== "Convocaton Skills:") {
                tv = lns[xi].replace(/ /g,"").split("/");

                if(tv.length > 1) {
                    var tv2 = tv[1].split("(SB:");
                    var tv3 = tv2[1].split(")OML:");
                    var mid = makeid();
                    mySet("repeating_loreskill_"+ mid +"_LORESKILL_NAME",charid,tv[0]);
                    mySet("repeating_loreskill_"+ mid +"_LORESKILL_SB",charid,tv3[0]);
                    mySet("repeating_loreskill_"+ mid +"_LORESKILL_ML",charid,tv2[0]);
                }
                xi++
            }

            xi++;

            while(lns[xi] !== "Psionics Skills:") {
                tv = lns[xi].replace(/ /g,"").split("/");

                if(tv.length > 1) {
                    var tv2 = tv[1].split("(SB:");
                    var tv3 = tv2[1].split(")OML:");
                    var mid = makeid();
                    mySet("repeating_magicskill_"+ mid +"_MAGICSKILL_NAME",charid,tv[0]);
                    mySet("repeating_magicskill_"+ mid +"_MAGICSKILL_SB",charid,tv3[0]);
                    mySet("repeating_magicskill_"+ mid +"_MAGICSKILL_ML",charid,tv2[0]);
                }
                xi++
            }

            xi++;


            while(lns[xi] !== "Ritual Skills:") {
                tv = lns[xi].replace(/ /g,"").split("/");
                if(tv.length > 1) {
                    var tv2 = tv[1].split("(SB:");
                    var tv3 = tv2[1].split(")OML:");
                    var mid = makeid();
                    mySet("repeating_psionics_"+ mid +"_TALENT_NAME",charid,tv[0]);
                    mySet("repeating_psionics_"+ mid +"_TALENT_FATIGUE",charid,"0");
                    mySet("repeating_psionics_"+ mid +"_TALENT_TIME",charid,"0");
                    mySet("repeating_psionics_"+ mid +"_TALENT_EML",charid,tv2[0]);
                    mySet("repeating_psionics_"+ mid +"_TALENT_NOTE",charid,lns[xi]);

                }


                xi++
            }

            xi++;

            while((lns[xi].slice(0,6) !== "Money:") && (lns[xi].slice(0,7) !== "Spells:") && (lns[xi].slice(0,12) !== "Invocations:")) {
                tv = lns[xi].replace(/ /g,"").split("/");

                if(tv.length > 1) {
                    var tv2 = tv[1].split("(SB:");
                    var tv3 = tv2[1].split(")OML:");
                    var mid = makeid();
                    mySet("repeating_ritualskill_"+ mid +"_RITUALSKILL_NAME",charid,tv[0]);
                    mySet("repeating_ritualskill_"+ mid +"_RITUALSKILL_SB",charid,tv3[0]);
                    mySet("repeating_ritualskill_"+ mid +"_RITUALSKILL_ML",charid,tv2[0]);
                }


                xi++
            }
            if(lns[xi].slice(0,12) == "Invocations:"){
                lns[xi] = lns[xi].slice(12);
                while(lns[xi].slice(0,6) !== "Money:") {
                    tv = lns[xi].split("/");
                    if(tv.length > 1) {

                        var mid = makeid();
                        mySet("repeating_rituals_"+ mid +"_RITUAL_NAME",charid,tv[0]);
                        mySet("repeating_rituals_"+ mid +"_RITUAL_RELIGION",charid,diety);
						mySet("repeating_rituals_"+ mid +"_RITUAL_LEVEL",charid,tv[1]);
						mySet("repeating_rituals_"+ mid +"_RITUAL_ML",charid,0);
                        mySet("repeating_rituals_"+ mid +"_RITUAL_EML",charid,0);
                        mySet("repeating_rituals_"+ mid +"_RITUAL_NOTE",charid,lns[xi]);

                    }


                    xi++
                }

            }
            if(lns[xi].slice(0,7) == "Spells:"){
                lns[xi] = lns[xi].slice(7);
                while(lns[xi].slice(0,6) !== "Money:") {
                    tv = lns[xi].split("/");
                    if(tv.length > 1) {

                        var mid = makeid();
                        mySet("repeating_spells_"+ mid +"_SPELL_NAME",charid,tv[0]);
                        mySet("repeating_spells_"+ mid +"_SPELL_CONVOCATION",charid,"");
						mySet("repeating_spells_"+ mid +"_SPELL_LEVEL",charid,tv[1]);
						mySet("repeating_spells_"+ mid +"_SPELL_ML",charid,0);
                        mySet("repeating_spells_"+ mid +"_SPELL_EML",charid,0);
                        mySet("repeating_spells_"+ mid +"_SPELL_NOTE",charid,"");


                    }


                    xi++
                }

            }
            if(lns[xi].slice(0,6) == "Money:") {
                var mid = makeid();
                mySet("repeating_inventoryitems_"+ mid +"_INVENTORY_NAME",charid,lns[xi]);
                mySet("repeating_inventoryitems_"+ mid +"_INVENTORY_WGT",charid,parseFloat(lns[xi].split(":")[1].slice(0,-1))/240);
            }
            xi++;
            if(lns[xi].slice(0,15) == "Clothing/Armor:"){
                lns[xi] = lns[xi].slice(16);
                while((lns[xi].slice(0,8) !== "Weapons:") && (lns[xi].slice(0,6) !== "Notes:")) {
                    addItem(charid, lns[xi]);
                    xi++;


                }

            }

            if(lns[xi].slice(0,8) == "Weapons:"){
                lns[xi] = lns[xi].slice(9);
                while((lns[xi].slice(0,10) !== "Equipment:") && (lns[xi].slice(0,6) !== "Notes:")) {
                    addWeapon(charid,lns[xi]);
                    xi++;
                }


            }

	            if(lns[xi].slice(0,10) == "Equipment:"){
	                lns[xi] = lns[xi].slice(11);
	                while(lns[xi].slice(0,6) !== "Notes:") {
	                    addItem(charid, lns[xi]);

	                    xi++;


	                }
	            }
            }
        }
    }
}




function replaceArg(acom, msg) {
    var args = msg.content.split(" ");
    for (var i=0; i<acom.length; i++)  {
        if (acom[i].indexOf('args') == 0) {
            acom[i] = args[parseInt(acom[i].substr(4))];

        }
        if (acom[i].indexOf('inline') == 0) {
            acom[i] = msg.inlinerolls[parseInt(acom[i].substr(6))].results.total;
        }

    }
    return acom;

}


function handle_table(args, msg) {
        var scdata = findObjs({
            name: args[1],
            _type: "handout",
        })[0];
        scdata.get("notes", function(scda) {

            var tt1 = scda.substring(22,scda.indexOf('</td></tr></tbody></table>'));
            var tt2 = tt1.split('</td></tr><tr><td>');
            var tt3 =[];
            for (var i=0; i<tt2.length; i++)  {
                tt3[i] = tt2[i].split('</td><td>')
            }
        log("p")
        var r1 = msg.inlinerolls[0].results.total;
        var r2 = msg.inlinerolls[1].results.total;
        var i1 = tt3.length-1;
        var i2 = tt3[0].length-1;
        for (var i=2; i<tt3.length; i++)  {
            if (r1 <= parseInt(tt3[i][0]) ) {
                i1 = i;
                break;
            }
        }
        for (var i=1; i<tt3[0].length; i++)  {
            if (r2 <= parseInt(tt3[0][i]) ) {
                i2 = i;
                break;
            }
        }
        var description = tt3[i1][i2].split(';');
        var out = '&{template:default} {{name=' + args[1] + '}} {{Rolls=' +  r1.toString() + ' ' + r2.toString() + '}} {{' + tt3[1][i2] + '= ' + description[0] + '}}';
        sendChat(msg.who, out);
        if (args[4] && description[1]) {
            log(args[4]);
            for (var i=1; i<description.length; i++) {
                commandLine = replaceArg(description[i].split(' '), msg);
                if (commandLine[0] == 'add') {
                    if (Number(commandLine[2])) {
                        var newVal = Number(myGet(commandLine[1], args[4], 0)) + Number(commandLine[2]);
                    } else {
                        var newVal = myGet(commandLine[1], args[4], 0) + " " + commandLine[2];
                    }
                    mySet(commandLine[1], args[4], newVal);
                }
                if (commandLine[0] == 'addmax') {
                    var newVal = Number(myGetmax(commandLine[1], args[4], 0)) + Number(commandLine[2]);
                    mySetmax(commandLine[1], args[4], newVal);
                }
                if (commandLine[0] == 'set') {
                    mySet(commandLine[1], args[4], commandLine[2]);
                    log(commandLine[1]);
                }
                if (commandLine[0] == 'setmax') {
                    mySet(commandLine[1], args[4], commandLine[2]);
                }
                if (commandLine[0] == 'say') {
                    var out = commandLine[1];
                    for (var j=2; j<commandLine.length; j++) {
                        out = out + ' ' + commandLine[j];
                    }

                    sendChat(args[1], out);
                }
            }
        }
        });
}


function chatParser(msg) {

	// check for and log crits
	if (msg.content.startsWith(" {{character_name=")) {
		var d = new Date();
		var n = d.toLocaleString();
		if (msg.content.includes("rolldesc=rolls ")) {
			if (msg.inlinerolls[3].results.total % 5 == 0) {
				var char = getCharByNameAtt(msg.content.slice((msg.content.indexOf("character_name")+15),msg.content.indexOf("}} ")));

				if (msg.inlinerolls[1].results.total >= msg.inlinerolls[3].results.total) {
					charLog(char.id,  ": CS " 
						+ msg.content.slice(msg.content.indexOf("rolldesc=rolls ")+15,
						msg.content.indexOf("}} ", msg.content.indexOf("rolldesc=rolls "))),realtime,gametime)
				} else {
					charLog(char.id,  ": CF " 
						+ msg.content.slice(msg.content.indexOf("rolldesc=rolls ")+15,
						msg.content.indexOf("}} ", msg.content.indexOf("rolldesc=rolls "))),realtime,gametime)
				}
			}
		} else 	if (msg.content.includes("rolldesc=performs ")) {
			if (msg.inlinerolls[7].results.total % 5 == 0) {
				var char = getCharByNameAtt(msg.content.slice((msg.content.indexOf("character_name")+15),msg.content.indexOf("}} ")));

				if (msg.inlinerolls[4].results.total >= msg.inlinerolls[7].results.total) {
					charLog(char.id,  ": CS " 
						+ msg.content.slice(msg.content.indexOf("rolldesc=performs ")+18,
						msg.content.indexOf("}} ", msg.content.indexOf("rolldesc=performs "))),realtime,gametime)
				} else {
					charLog(char.id,  ": CF " 
						+ msg.content.slice(msg.content.indexOf("rolldesc=performs ")+18,
						msg.content.indexOf("}} ", msg.content.indexOf("rolldesc=performs "))),realtime,gametime )
				}
			}
		} else 	if (msg.content.includes("rolldesc=casts ")) {
			if (msg.inlinerolls[7].results.total % 5 == 0) {
				var char = getCharByNameAtt(msg.content.slice((msg.content.indexOf("character_name")+15),msg.content.indexOf("}} ")));

				if (msg.inlinerolls[4].results.total >= msg.inlinerolls[7].results.total) {
					charLog(char.id,  ": CS " 
						+ msg.content.slice(msg.content.indexOf("rolldesc=casts ")+15,
						msg.content.indexOf("}} ", msg.content.indexOf("rolldesc=casts "))),realtime,gametime)
				} else {
					charLog(char.id,  ": CF " 
						+ msg.content.slice(msg.content.indexOf("rolldesc=casts ")+15,
						msg.content.indexOf("}} ", msg.content.indexOf("rolldesc=casts "))),realtime,gametime )
				}
			}
		}
	}
}